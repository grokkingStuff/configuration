#+TITLE: Configs & Dotfiles
#+AUTHOR: Vishakh Kumar
#+EMAIL: vishakhpradeepkumar@gmail.com
#+LICENSE: GPLv3
#+LANGUAGE: en
#+OPTIONS: num:5 whn:2 toc:4 H:6

#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS


:padline no

* Overview

Built these configuration files because I spend way too much time on my computer and I like my computer a certain way.
Also, I reinstall the os from time to time to clear up junk (hopefully the number of times I do this in the future will go down, as I'm using opensuse.)


1) Command-line tools 
   1) Install command_line_tools.txt
      #+BEGIN_SRC bash
      zypper install <<command_line_tools>>
      #+END_SRC
   2) Place configuration files for commandline tools
      #+BEGIN_SRC bash

      #+END_SRC
2) GUI pplications
   1) Install gui_tools.txt
      #+BEGIN_SRC bash
      zypper install <<gui_tools>>
      #+END_SRC
   2) Place configuration files for applications
      #+BEGIN_SRC bash

      #+END_SRC
3) Modify system preferences
4) Modify personal preferences
5) Add cloud services

* Operating System
** Terminal tools
*** libntify                                               :commandLineTools:
 #+NAME: command_line_tools
 #+BEGIN_SRC sh
 libnotify-tools
 #+END_SRC

 Use notify-send to create notifications from terminal.
 #+BEGIN_SRC sh
 notify-send 'head' 'body'
 #+END_SRC
*** bash
 The shell that runs everywhere! You've probably noticed that but almost everything in this config file is written in bash, precisely for that reason - I can write quick and easy code that can run on any system without the need to create binaries.
 I won't be installing it because I don't need to install it. However, bash could use a few upgrades - especially when it comes to aliases and looks.
**** bash aliases

 Bash aliases are always rather useful, especially when you're tired/lazy and you just wanna get things done.
 While I'll be listing a couple of bash aliases over here, I've be placing bash aliases specific to a program else wherever that program is being described.

 You can see all bash aliases by typing
 #+BEGIN_SRC sh
 cat terminalEmulator/bash/bash_aliases.txt
 #+END_SRC
 #+RESULTS:
 | alias | gs='git    | status   | '       |         |
 | alias | ga='git    | add      | '       |         |
 | alias | gb='git    | branch   | '       |         |
 | alias | gam='git   | commit   | --amend | '       |
 | alias | gc='git    | commit'  |         |         |
 | alias | gd='git    | diff'    |         |         |
 | alias | gt='git    | checkout | '       |         |
 | alias | gk='gitk   | --all&'  |         |         |
 | alias | gx='gitx   | --all'   |         |         |
 | alias | pull='git  | pull'    |         |         |
 | alias | pullo='git | pull     | origin' |         |
 | alias | push='git  | push'    |         |         |
 | alias | pusho='git | push     | origin' |         |
 | alias | pushf='git | push     | -f      | origin' |
 | alias | pushu='git | push     | -u      | origin' |
 | alias | merge='git | merge'   |         |         |
 | alias | got='git   | '        |         |         |
 | alias | get='git   | '        |         |         |
 | alias | clone='git | clone'   |         |         |
 | alias | add='git   | add'     |         |         |

***** Navigation
****** Easier navigation: .., ..., ...., ....., ~ and -
  - Travel up directories quickly.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias ..="cd .."
  alias ...="cd ../.."
  alias ....="cd ../../.."
  alias .....="cd ../../../.."
  #+END_SRC
  - Travel to home directory and previous directory.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias ~="cd ~" # `cd` is probably faster to type though
  alias -- -="cd -"
  #+END_SRC

****** Shortcuts to commonly used folders
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias dev="cd ~/Dev"
  alias downloads="cd ~/Downloads"
  alias desktop="cd ~/Desktop"
  alias projects="cd ~/projects"
  #+END_SRC
****** Shortcuts to commonly used commands
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias g="git"
  alias h="history"
  alias j="jobs"
  #+END_SRC
***** aliases that modify ls
****** Detect which `ls` flavor is in use and set relevant color flag
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  if ls --color > /dev/null 2>&1; then # GNU `ls`
	  colorflag="--color"
  else # OS X `ls`
	  colorflag="-G"
  fi
  #+END_SRC
****** List all files colorized in long format
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias l="ls -lF ${colorflag}"
  #+END_SRC
****** List all files colorized in long format, including dot files
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias la="ls -laF ${colorflag}"
  #+END_SRC
****** List only directories
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
  #+END_SRC
****** Always use color output for `ls`
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias ls="command ls ${colorflag}"
  export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
  #+END_SRC

***** grep
****** Always enable colored `grep` output
  # Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  #+END_SRC

***** Enable aliases to be sudo’ed
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias sudo='sudo '
 #+END_SRC

***** Get week number
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias week='date +%V'
 #+END_SRC

***** Stopwatch
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
 #+END_SRC

***** Updates and Cleanups
****** Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias update='sudo softwareupdate -i -a; brew update; brew upgrade --all; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update'
  #+END_SRC
****** Flush Directory Service cache
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"
  #+END_SRC
****** Clean up LaunchServices to remove duplicates in the “Open With” menu
   #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
   alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
   #+END_SRC
****** Recursively delete `.DS_Store` files
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias DSStorecleanup="find . -type f -name '*.DS_Store' -ls -delete"
  #+END_SRC
****** Empty trash
  # Empty the Trash on all mounted volumes and the main HDD.
  # Also, clear Apple’s System Logs to improve shell startup speed.
  # Finally, clear download history from quarantine. https://mths.be/bum
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"
  #+END_SRC

***** IP and web related aliases
****** IP addresses
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
  alias localip="ipconfig getifaddr en0"
  alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
  #+END_SRC

****** View HTTP traffic
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
  alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
  #+END_SRC
***** Encryption
****** OS X has no `md5sum`, so use `md5` as a fallback
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v md5sum > /dev/null || alias md5sum="md5"
  #+END_SRC
****** OS X has no `sha1sum`, so use `shasum` as a fallback
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v sha1sum > /dev/null || alias sha1sum="shasum"
  #+END_SRC
****** Canonical hex dump; some systems have this symlinked
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v hd > /dev/null || alias hd="hexdump -C"
  #+END_SRC
***** JavaScriptCore REPL
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
 [ -e "${jscbin}" ] && alias jsc="${jscbin}";
 unset jscbin;
 #+END_SRC

***** Trim new lines and copy to clipboard
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias c="tr -d '\n' | pbcopy"
 #+END_SRC

***** Show/hide hidden files in Finder
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias showHiddenFiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
 alias hideHiddenFiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
 #+END_SRC

***** Hide/show all desktop icons (useful when presenting)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias hideDesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
 alias showDesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
 #+END_SRC

***** URL-encode strings
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'
 #+END_SRC

***** Merge PDF files
 # Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'
 #+END_SRC

***** PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias plistbuddy="/usr/libexec/PlistBuddy"
 #+END_SRC

***** Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
 # (useful when executing time-consuming commands)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias badge="tput bel"
 #+END_SRC

***** Intuitive map function
 # For example, to list all directories that contain a certain file:
 # find . -name .gitattributes | map dirname
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias map="xargs -n1"
 #+END_SRC

***** One of @janmoesen’s ProTip™s
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	 alias "$method"="lwp-request -m '$method'"
 done
 #+END_SRC

***** Make Grunt print stack traces by default
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 command -v grunt > /dev/null && alias grunt="grunt --stack"
 #+END_SRC

***** Stuff I never really use but cannot delete either because of http://xkcd.com/530/
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias stfu="osascript -e 'set volume output muted true'"
 alias pumpitup="osascript -e 'set volume 7'"
 #+END_SRC

***** Kill all the tabs in Chrome to free up memory
 # [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"
 #+END_SRC

***** Lock the screen (when going AFK)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
 #+END_SRC

***** Reload the shell (i.e. invoke as a login shell)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias reload="exec $SHELL -l"
 #+END_SRC

***** Homestead
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias homestead='function __homestead() { (cd ~/Homestead && vagrant $*); unset -f __homestead; }; __homestead'
 #+END_SRC
***** phps
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias phps='php -S 127.0.0.1:9000'
 #+END_SRC
***** webpack
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias wp='webpack'
 alias wpc='touch webpack.config.js'
 alias wds='webpack-dev-server'
 #+END_SRC

* File management

- org-agenda integration
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
    (file-expand-wildcards "~/Proposals/*.org")
    (file-expand-wildcards "~/Projects/*.org")
    (file-expand-wildcards "~/PersonalDevelopment/*.org")
    (file-expand-wildcards "~/College/*.org")
    (file-expand-wildcards "~/Business/*.org")
    (file-expand-wildcards "~/Finances/*.org")
)
#+END_SRC emacs-lisp


** organizer.org
*** Tasks
  :PROPERTIES:
  :CATEGORY: Task
  :END:
*** Important dates
  :PROPERTIES:
  :CATEGORY: Date
  :END:
**** Anniversary
**** Expiry Date of Credit Cards
Inform one week in advance
**** Bills to be paid
**** Membership days
**** Religious Holiday
**** Government Holiday
**** Conference Periods
**** College Events

** refile.org
Main org file for org-capture and todo tasks
** Proposals
For all the evil plans you have for the future.
*** commercial_ideas.org
*** whimsical_ideas.org
*** proposals.org
*** Subfolder 1
** Configuration
All your config files are to be stored here
*** config.org
For all your configuration file definitions
*** emacs_configuration.org
*** projectManagement.org
*** secrets.org
For account information and ssh keys.
** Archive
For archived documents that don't quite have a home but can't be deleted
*** archive.org
Archived sub trees
** Website :website:
*** website.org
For website source code
*** blog.org
Topic index for my blog

** Personal Development
*** online_learning.org
For all your online learning todos and planning
**** lynda
**** mit ocw
**** coursera
*** improvements.org
** College
*** college.org
All class information and deadlines. Treat as read-only during semester unless the professor gives test details during the semester.
*** Current Semester
**** Class 1
***** notes.org
***** textbook.pdf
***** Office Lens Scans
Not just Office Lens Scans but all scans in general. Just going to use Office Lens a lot.
Treat this folder as read only - don't delete anything.
***** Old Papers
**** Class 2
***** notes.org
***** textbook.pdf
***** Office Lens Scans
***** Old Papers
*** Previous semesters
** Business
*** business.org

**** System Maintenance
  :PROPERTIES:
  :CATEGORY: Maintenance
  :END:
**** Payroll
  :PROPERTIES:
  :CATEGORY: Payroll
  :END:
**** Accounting
  :PROPERTIES:
  :CATEGORY: Accounting
  :END:
**** Finances
  :PROPERTIES:
  :CATEGORY: Finance
  :END:
**** Hardware Maintenance
  :PROPERTIES:
  :CATEGORY: Hardware
  :END:
**** Tasks
  :PROPERTIES:
  :CATEGORY: Task
  :END:
**** Research and Development
  :PROPERTIES:
  :CATEGORY: Idea
  :END:
**** Notes
  :PROPERTIES:
  :CATEGORY: Note
  :END:
**** Purchase Order Tracking
  :PROPERTIES:
  :CATEGORY: PurchaseOrder
  :END:
**** Passwords
  :PROPERTIES:
  :CATEGORY: Password
  :END:
**** Clients & Associates
  :PROPERTIES:
  :CATEGORY: Contact
  :END:
**** Procedures
  :PROPERTIES:
  :CATEGORY: Workflow
  :END:
**** Checklists
  :PROPERTIES:
  :CATEGORY: Checklist
  :END:


**** COMMENT Stolen from somewhere
Business-related information and plans
- Clients
- Procedures
- Associates
- Media
- Checklists
- Work-in-progress

**** COMMENT Stolen from http://doc.norang.ca/org-mode.html#OrgFileStructure 
***** System Maintenance
***** Payroll
***** Accounting
***** Finances
***** Hardware Maintenance
***** Tasks
***** Research and Development
***** Notes
***** Purchase Order Tracking
***** Passwords

*** contacts.org
** Finances
*** Banks
  :PROPERTIES:
  :CATEGORY: Bank
  :END:
**** Account 1 - Bank 1
***** Account Number
***** Billing Address

*** Money
  :PROPERTIES:
  :CATEGORY: Money
  :END:
**** Archive
** Medical
*** medical.org for context and information
**** NMC Deira
**** NIMHANS
**** Medical Archive

** Asset Management
Need more advice here
*** Real Estate
Not exactly applicable now but should be in the future.
*** Vehicles
Not a concern now but will be in the future.
*** Warranties
Should keep scans of the warranty sticker
*** Electronics
*** Home Inventory
Mainly the fancier ones that require upkeep.
** Photos
Organized by trip.
** Documents
*** Passport 
*** ID
**** Emirates ID
**** Aadhar Card
**** Buzzcard
**** Driver's License
***** Dubai
***** United States

*** CV
Don't delete them anymore. Sort by year
*** Georgia Tech
*** US Admission
*** Medical
*** Digital Files
*** Misc Files
*** US Admission
*** CBSE - JEE
*** IIST
*** MIT
*** Music
*** National Olympiads
*** Organic Charts
*** Physics Project
*** Pictures
*** Plancess Demo CD
*** Ridge View
*** Travel Doc - Reservations
*** US
*** Vijaygiri
*** Vish
*** Vish - Digital Files + Photos
*** Vishakh's Essays

* To use

add to new project template http://blog.modelworks.ch/using-org-mode-to-keep-track-of-your-project-files/

special task category WAIT where you wait for input from someone

http://blog.modelworks.ch/removing-extra-blank-lines-in-emacs/ add hook after saving

org-sparse-tree to find all headlines with a certain tag.

There was a guy out there who described in painstaking detail each step he had to take to remake his configuration. Do that - especially for chrome and firefox extensions.

* Programming Languages
** Python configuration

 (Slightly edited from [[https://medium.com/@henriquebastos/the-definitive-guide-to-setup-my-python-workspace-628d68552e14][Medium Link]]. Credit to Henrique Bastos)

 Requirements: 
 + I need to be able to use multiple versions of CPython 2 and 3, as well as other interpreters like PyPy and Anaconda;
 + Python3 must be the default for everything. However, I should be able to use Python 2 when I wish to.
 + Jupyter Notebook should work with Python2 and Python3, and is able to detect the active virtualenv at jupyter notebook execution time.
 + A single iPython Console for Python3 and one iPython Console for Python2, so no need to install iPython on my projects' virtualenvs.
 + I want useful programs written in Python (ex: youtube-dl) globally available on my system without contaminating the global interpreters and avoiding any library version issues.
 + I want to use virtualenvwrapper to develop my projects allowing me to change context/project quickly with one command.
 + I want this setup to be maintainable without adding too many thing to PATH.

*** Why I use pyenv
 For me pyenv is the best way to install Python on a Mac or Linux. Everything gets installed under your home directoy, without tampering with the rest of the system. Besides that, it supports many different Python implementation such as PyPy, Anaconda, CPython, etc. All with one command.

 #+NAME: command_line_tools
 #+BEGIN_SRC txt
 pyenv
 pyenv-virtualenv
 pyenv-virtualenvwrapper
 #+END_SRC

* Bash Library
Bash is a pain in the ass to work with if you need to be safe. This library allows you to write bash that's well-organized, somewhat tested, and hopefully cross platform.

** Main function

 #+NAME: connect.sh
 #+CAPTION: The overall structure of connect.sh
 #+BEGIN_SRC sh :tangle connectRemote.sh
   #!/usr/bin/env bash
   ## Description: Connects to remote server and relays local changes made in git repo and opens a shell in remote server.
   <<author_information>>
   <<license_information>>

   <<system_library>>

   # Main control flow
   #function main() {
   #  <<preamble_library>>
   #}

   #main "$@"
 #+END_SRC

*** DONE Author Information
    CLOSED: [2018-06-15 Fri 21:59]
 Because someone needs to take the blame for when this script goes insane. Seriously, someone take this piece of shit code from me and make it better. Free brownies for whoever does that.

  #+NAME: author_information
  #+BEGIN_SRC sh :noweb yes
 ################################################
 #                                              #
 #              Author Information              #     
 #                                              #
 # Author: Vishakh Pradeep Kumar                #
 # Email: grokkingStuff@gmail.com on 04-2018    #
 # Current maintainer: Vishakh Pradeep Kumar    #
 ################################################
  #+END_SRC


*** DONE License information
    CLOSED: [2018-06-15 Fri 21:59]
 Even if it seems pretentious, it's good to have a license so that other people can use it. Since this code isn't exactly going to be used in a production environment, I'm going to stick a GPL license on it.

 #+NAME: license_information
 #+BEGIN_SRC sh :noweb yes
 #####################################################################################
 #                                                                                   #
 #                                License Information                                #
 #                                                                                   #
 # License: GPLv2, see http://www.fsf.org/licensing/licenses/info/GPLv2.html         #
 # and accompanying license "LICENSE.txt". Redistribution + modification under this  #
 # license permitted.                                                                #
 # If you enclose this script or parts of it in your software, it has to             #
 # be accompanied by the same license (see link) and the place where to get          #
 # the recent version of this program: https://testssl.sh                            #
 # Don't violate the license.                                                        #
 #                                                                                   #
 # USAGE WITHOUT ANY WARRANTY, THE SOFTWARE IS PROVIDED "AS IS". USE IT AT           #
 # your OWN RISK                                                                     #
 #####################################################################################
 #+END_SRC




** Preamble
  For all the stuff that doesn't really matter to the structure of the program but is quite important for everything else.

 #+CAPTION: Preamble src block
  #+BEGIN_SRC sh :noweb yes
 <<preamble::user_input>>
  #+END_SRC

*** Example of an implementation of getopts and constants that's not bad
 #+NAME: preamble::user_input
 #+CAPTION: List of all available flags
 #+BEGIN_SRC sh :noweb yes
 #########################
 # Constants Declaration #
 #########################

 # Home computer information
 USER_VCS_REPO="$(system::vcs_repo_root)"
 USER_MACHINE="$(system::detect_operating_system)"

 # Remote user information
 REMOTE_IPADDRESS='143.215.98.17'
 REMOTE_USER='pi'
 REMOTE_USER_PASSWORD='raspberry'
 REMOTE_LOCATION='/home/pi/Github/2018'

 #######################
 # User input & Flags  #
 #######################

 while getopts ":iufph:*" o; do
     case "${o}" in

         i) ## IP Address flag. Specify ip address. Default is 143.215.98.17
             REMOTE_IPADDRESS="${OPTARG}" 
             ;;

         u) ## Remote username flag. Specify username of raspberry pi. Default is 'pi'
             REMOTE_USER="${OPTARG}" 
             ;;

         f) ## Location of remote folder flag. Specify location of github repo on raspberry pi. Change only if not working on 2018 folder 
             REMOTE_LOCATION="${OPTARG}"
             ;;

         p) ## Password flag. Specify a password for user on remote server
             REMOTE_USER_PASSWORD="${OPTARG}"
             ;;

         h) ## Help flag. Displays flag options 
             system::usage
             exit 0
             ;;

         :)  # For when a mandatory argument is skipped.
             system::err "Option -$OPTARG requires an argument."
             system::usage
             exit 1
             ;;
         *) 
             system::err "Unexpected option ${flag}"
             system::usage
             exit 1 
             ;;
     esac
 done

 ##############################
 # Constants turned read-only #
 ##############################

 # Home computer information
 readonly USER_VCS_REPO
 readonly USER_MACHINE

 # Remote user information
 readonly REMOTE_IPADDRESS
 readonly REMOTE_USER
 readonly REMOTE_USER_PASSWORD
 readonly REMOTE_LOCATION
 #+END_SRC

** DONE System library                                         :library:bash:
   CLOSED: [2018-06-15 Fri 22:25]

 Functions that are used to query or support the system fall under this library.

 #+NAME: system_library
 #+BEGIN_SRC 
 <<system::help_dialog>>
 <<system::detect_operating_system>>
 <<system::err>>
 <<system::vcs_repo_root>>
 <<system::check_required_programs>>
 <<system::color_initialization>>
 <<system::echo>>
 #+END_SRC

*** DONE Help prompt
    CLOSED: [2018-06-15 Fri 22:17]
  A quick and effective help function that uses the comments in the flag case block. Scans this file for a "##" in front of a ")" and displays those lines exclusively.
  Restrict comments to single # to avoid unnecessary mixup.

  #+NAME: system::help_dialog
  #+BEGIN_SRC sh :noweb yes
 ########################################################
 # Displays a list of all flags with their descriptions
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns:
 #   None
 ########################################################
 function system::usage() {
     echo "$0 usage:" &&              \           
       grep "[[:space:]].)\ ##" $0 |  \         # Find all line in script that have '##' after a ')' 
       sed 's/##//' |                 \         # Replace all '##' with nothing
       sed -r 's/([a-z])\)/-\1/';              # TODO Can't remember
 }
  #+END_SRC
*** DONE Detect operating system                              :function:bash:
    CLOSED: [2018-06-15 Fri 22:17]
 Since this command will be executed by different people of multiple operating systems, I've decided to use as many bash built-ins as possible for portability. However, there are still things that need to be set for each operating system. This code block detects the operating system and makes it available in the variable $MACHINE. I was gonna hack together a way to do this using the uname command but I think using  pre-defined $OSTYPE variable is cleaner.


 - I can't run this in CMD.EXE! What do I do?
   CMD.EXE does not have an inbuilt utility to run sh files. You can install a Linux shell for Windows which should be more than adequate for your purposes. Alternatively, you can install Powershell & Cygwin, although the Linux shell is definitely recommended. Just to be clear, CMD.EXE can run scripts! It's just that no sane man would bother building a good script in a .cmd file.

 - This doesn't run on my OS.
   Huh. That's pretty interesting. This script should run on any system that supports bash (although it may have a few eccentricities.)
   If you're sure it's not your fault, you should totally send me an email about that.

 - This particular function seems too useful for a simple script like this. It's not bad.
   I'm glad you think so! It's really there because I fell down a rabbit hole and I overestimated the importance of being ultra-portable. 
   Use it if you can in your own scripts!

 #+NAME: system::detect_operating_system
 #+CAPTION: bash function to detect the operating system the shell is running on.
 #+BEGIN_SRC sh :noweb yes
 #################################################################
 # Detects the operating system that this script is being run on
 # Globals:
 #   OSTYPE
 # Arguments:
 #   None
 # Returns:
 #   MACHINE
 #################################################################
 function system::detect_operating_system() {

     local MACHINE
     MACHINE=""      
    
     case "$OSTYPE" in

     #########################################################################
     # *nix systems                                                          #
     #########################################################################
         solaris*) 
             MACHINE="SOLARIS"                                                     # Do people even use Solaris anymore? Gosh, haven't heard this name in a while.
             ;;
         darwin*) 
             MACHINE="OSX"
             ;;
         linux*)
             MACHINE="LINUX"
             ;;
         bsd*)
             MACHINE="BSD"
             ;;    
     #    aix*)
     #        MACHINE="AIX"
     #        ;;    
     #    #Was gonna add AIX but I dunno if it has the $OSTYPE variable and I don't really care.
    

     #########################################################################
     # windows systems                                                       #
     #########################################################################
         cygwin*)
             MACHINE="WINDOWS"
             ;&                                                                    # Since Windows has two options for $OSTYPE, we're gonna let it cascade into the next case
         msys*)
             MACHINE="WINDOWS"

                                                                                   # We're using uname -s to figure out which shell in Windows we're using.
             unameOut = "$(uname -s)"
             case "${unameOut}" in
                 CYGWIN*)
                     MACHINE="WINDOWS-CYGWIN"
                     # This should work for git shell as well. 
                     # I'm not sure why you're using git-shell to do anything except run git commands but cool. You do you, mate.
                     ;;
                 MINGW32_NT*)
                     MACHINE="WINDOWS-32"
                     ;;
                 MINGW64_NT*)
                     MACHINE="WINDOWS-64"
                     ;;
                 Linux*)
                     MACHINE="WINDOWS-POWERSHELL"
                     # Not sure why Powershell returns Linux when uname-s is passed to it. Seems janky.
                     echo "This script will not run in Powershell. Please install a bash shell."
                     echo "Terminating program."
                     exit 1

             esac
             ;;
    
     #########################################################################
     # This shouldn't happen but I'm super interested if it does!            #
     #########################################################################
         *)
             MACHINE="unknown: $OSTYPE"
             echo "I don't know what you're running but I'm interested! Send me an email at grokkingStuff@gmail.com"
             echo "I'm guessing you're running some sort of custom unix machine so as long as you have access to bash, you should be good."
             echo "I mean, seriously, what are you running! Is it a really old system and if so, can you send me pics? pretty please!"
             echo "If you do have issues, do send me a email but I can't promise I can make it work on your system."
             ;;
     esac

     # Time to return the answer
     return $MACHINE
 }
 #+END_SRC

*** DONE Sending time-tagged strings into STDERR              :function:bash:
    CLOSED: [2018-06-15 Fri 22:17]

 All error messages should go to STDERR (standard error), including user defined errors. This function attaches a date and time to a string and passes it to STDERR
 Reference: [[https://google.github.io/styleguide/shell.xml?showone=STDOUT_vs_STDERR#STDOUT_vs_STDERR][Google Style Sheet: STDOUT vs STDERR]]

 #+NAME: system::err
 #+CAPTION: Function to generate errors and logs with attached date and time.
 #+BEGIN_SRC sh :noweb yes
 ###########################################################
 # Allows for user to send time-tagged strings into STDERR
 # Globals:
 #   None
 # Arguments:
 #   Array of String(s)
 # Returns:
 #   None
 ###########################################################
 function system::err() {
   echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
 }
 #+END_SRC

*** DONE Check if required programs are installed             :function:bash:
    CLOSED: [2018-06-15 Fri 22:17]
 While this should ideally be taken care of by testing on different systems and by using portable bash builtins, there really isn't a substitute to checking if the command/program you're looking for is installed on the computer.

 #+NAME: system::check_required_programs
 #+BEGIN_SRC sh
 #####################################################################################
 # Checks if the list of commands given to it is executable and available on a system
 # Globals:
 #   None
 # Arguments:
 #   
 # Returns:
 #   None
 #####################################################################################
 function system::check_required_programs() {
   for p in ${@}; do
     hash "${p}" 2>&- || \
         { system::err "Required program \"${p}\" not installed or in search PATH.";
           exit 1;
         }
   done
 }
 #+END_SRC

*** DONE Detect VCS system and find root directory            :function:bash:
    CLOSED: [2018-06-15 Fri 22:17]

 So it turns out that different VCS have different ways of querying for the location of the root folder. Since I've only used git and I've dabbled in Mercurial, this code might be outdated and downright wrong. However, gonna stick this in here since it might be handy.

 #+NAME: system::vcs_repo_root
 #+CAPTION: Function to return root of vcs repository when possible 
 #+BEGIN_SRC sh
 ##########################################################################################
 # Checks if current folder is a VCS and if so, finds the location of the root repository.
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns
 #   VCS_REPO_ROOT as String 
 ##########################################################################################
 function system::vcs_repo_root() {

   local VCS_REPO_ROOT;
   VCS_REPO_ROOT="";

   # Check if repository is a git repo
   if git rev-parse --is-inside-work-tree 2> /dev/null; then
     # This is a valid git repository.
     VCS_REPO_ROOT="$(git rev-parse --show-toplevel)";

   elif hg --cwd ./ root 2> /dev/null; then
     # This is a valid mercurial repository.
     VCS_REPO_ROOT="$(hg root)";

   elif svn ls ./ > /dev/null; then
     # This is a valid svn repository.
     VCS_REPO_ROOT="$(svn info --show-item wc-root)";
    
   if [[ -z VCS_REPO_ROOT ]]; then
     echo $VCS_REPO_ROOT;
   else
     system:err "Current directory is not within a vcs repository. Terminating program.";
     exit 1;
 }
 #+END_SRC

*** DONE Colors & Text attributes                    :function:constant:bash:
    CLOSED: [2018-06-15 Fri 22:17]

 Because all the colors and fancy effects! Shamelessly stolen from https://github.com/ralish/bash-script-template/blob/stable/template.sh 

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|


 #+NAME: system::color_initialization
 #+BEGIN_SRC sh
 ################################################
 # Initialise colour variables and text options
 # Global: 
 #   None
 # Arguments:
 #   None:
 # Returns:
 #   None
 ################################################
 function colour_init() {
     if [[ -z ${no_colour-} ]]; then

         readonly reset_color="$(tput sgr0 2> /dev/null || true)"
         <<colors_text_attributes>>
         <<colors_foreground>>
         <<colors_background>>
     else
         readonly reset_color=''
         <<colors_null_values>>
     fi
 }        
 #+END_SRC

**** colors_text_attributes                                   :constant:bash:

Text attributes can be changed by writing "ta_" followed by the particular text attribute you want. The options are:

#+CAPTION: Different text attribute options
 |-----------+---------------------------------|
 | Command   | Description                     |
 |-----------+---------------------------------|
 | tput bold | # Select bold mode              |
 | tput dim  | # Select dim (half-bright) mode |
 | tput smul | # Enable underline mode         |
 | tput rmul | # Disable underline mode        |
 | tput rev  | # Turn on reverse video mode    |
 | tput smso | # Enter standout (bold) mode    |
 | tput rmso | # Exit standout mode            |
 |-----------+---------------------------------|

 #+NAME: colors_text_attributes
 #+BEGIN_SRC sh
 # Text attributes
 readonly ta_bold="$(tput bold 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_uscore="$(tput smul 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_blink="$(tput blink 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_reverse="$(tput rev 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_conceal="$(tput invis 2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_foreground                                        :constant:bash:

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|

 #+NAME: colors_foreground
 #+BEGIN_SRC sh
 # Foreground codes
 readonly fg_black="$(tput setaf 0     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_blue="$(tput setaf 4      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_cyan="$(tput setaf 6      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_green="$(tput setaf 2     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_magenta="$(tput setaf 5   2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_red="$(tput setaf 1       2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_white="$(tput setaf 7     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_yellow="$(tput setaf 3    2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_background                                        :constant:bash:

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|

 #+NAME: colors_background
 #+BEGIN_SRC sh
 # Background codes
 readonly bg_black="$(tput setab 0     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_blue="$(tput setab 4      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_cyan="$(tput setab 6      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_green="$(tput setab 2     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_magenta="$(tput setab 5   2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_red="$(tput setab 1       2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_white="$(tput setab 7     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_yellow="$(tput setab 3    2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_null_values                                       :constant:bash:
 If we don't use colors in our code but still put references to it in our code, it might cause annoying issues.
 We'll be setting them to '' so that nothing happens and our code is safe.
 #+NAME: colors_null_values
 #+BEGIN_SRC sh
 # Text attributes
 readonly ta_bold=''
 readonly ta_uscore=''
 readonly ta_blink=''
 readonly ta_reverse=''
 readonly ta_conceal=''

 # Foreground codes
 readonly fg_black=''
 readonly fg_blue=''
 readonly fg_cyan=''
 readonly fg_green=''
 readonly fg_magenta=''
 readonly fg_red=''
 readonly fg_white=''
 readonly fg_yellow=''

 # Background codes
 readonly bg_black=''
 readonly bg_blue=''
 readonly bg_cyan=''
 readonly bg_green=''
 readonly bg_magenta=''
 readonly bg_red=''
 readonly bg_white=''
 readonly bg_yellow=''
 #+END_SRC



*** DONE POSIX compliant echo                                 :function:bash:
    CLOSED: [2018-06-15 Fri 22:17]

 While echo is a rather common tool, it's actually terribly designed. It's only portable if you don't any use flags and it's output isn't consistent. 
 We'll be using printf instead, which is POSIX-compliant and much better designed. As a special function, it will be listed as both system::echo and echo, for ease of use.
#+NAME: system::echo
 #+BEGIN_SRC sh
 ######################################################
 # Makes echo POSIX-compliant while retaining options
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns:
 #   None
 ######################################################
 function echo () (
 fmt=%s end=\\n IFS=" "

 while [ $# -gt 1 ] ; do
 case "$1" in
 [!-]*|-*[!ne]*) break ;;
 *ne*|*en*) fmt=%b end= ;;
 *n*) end= ;;
 *e*) fmt=%b ;;
 esac
 shift
 done

 printf "$fmt$end" "$*"
 )

 function ok() {
    echo -e "\n $fg_green [ok] $fg_black " $1
 }

 function bot() {
     fg_green
     echo -e "\n $fg_green \[._.]/$fg_black - "$1
     fg_black 
 }

 function running() {
     echo -en "$fg_yellow \u21d2 $fg_black"$1": "
 }

 function action() {
     echo -e "\n $fg_yellow [action]: $fg_black \n \u21d2 $1..."
 }

 function warn() {
     echo -e "$COL_YELLOW[warning]$COL_RESET "$1
 }

 function error() {
     echo -e "$COL_RED[error]$COL_RESET "$1
 }
  #+End_SRC
