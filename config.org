#+TITLE: Configs & Dotfiles
#+AUTHOR: Vishakh Kumar
#+EMAIL: vishakhpradeepkumar@gmail.com
#+LICENSE: GPLv3
#+LANGUAGE: en
#+OPTIONS: num:5 whn:2 toc:4 H:6

#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS


:padline no

* Overview

Built these configuration files because I spend way too much time on my computer and I like my computer a certain way.
Also, I reinstall the os from time to time to clear up junk (hopefully the number of times I do this in the future will go down, as I'm using opensuse.)


1) Command-line tools 
   1) Install command_line_tools.txt
      #+BEGIN_SRC bash
      zypper install <<command_line_tools>>
      #+END_SRC
   2) Place configuration files for commandline tools
      #+BEGIN_SRC bash

      #+END_SRC
2) GUI pplications
   1) Install gui_tools.txt
      #+BEGIN_SRC bash
      zypper install <<gui_tools>>
      #+END_SRC
   2) Place configuration files for applications
      #+BEGIN_SRC bash

      #+END_SRC
3) Modify system preferences
4) Modify personal preferences
5) Add cloud services

* Operating System
** Terminal tools
*** libntify                                               :commandLineTools:
 #+NAME: command_line_tools
 #+BEGIN_SRC sh
 libnotify-tools
 #+END_SRC

 Use notify-send to create notifications from terminal.
 #+BEGIN_SRC sh
 notify-send 'head' 'body'
 #+END_SRC
*** bash
 The shell that runs everywhere! You've probably noticed that but almost everything in this config file is written in bash, precisely for that reason - I can write quick and easy code that can run on any system without the need to create binaries.
 I won't be installing it because I don't need to install it. However, bash could use a few upgrades - especially when it comes to aliases and looks.
**** bash aliases

 Bash aliases are always rather useful, especially when you're tired/lazy and you just wanna get things done.
 While I'll be listing a couple of bash aliases over here, I've be placing bash aliases specific to a program else wherever that program is being described.

***** Navigation
****** Easier navigation: .., ..., ...., ....., ~ and -
  - Travel up directories quickly.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias ..="cd .."
  alias ...="cd ../.."
  alias ....="cd ../../.."
  alias .....="cd ../../../.."
  #+END_SRC
  - Travel to home directory and previous directory.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias ~="cd ~" # `cd` is probably faster to type though
  alias -- -="cd -"
  #+END_SRC

****** Shortcuts to commonly used folders
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias downloads="cd ~/Downloads"
  alias desktop="cd ~/Desktop"
  alias projects="cd ~/Projects"
  #+END_SRC
****** Shortcuts to commonly used commands
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
  alias g="git"
  alias h="history"
  #+END_SRC
***** grep
****** Always enable colored `grep` output
  # Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  #+END_SRC

***** Enable aliases to be sudo’ed
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias sudo='sudo '
 #+END_SRC

***** Get week number
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias week='date +%V'
 #+END_SRC

***** Stopwatch
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
 #+END_SRC

***** Updates and Cleanups
****** Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias update='sudo softwareupdate -i -a; brew update; brew upgrade --all; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update'
  #+END_SRC
****** Flush Directory Service cache
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"
  #+END_SRC
****** Clean up LaunchServices to remove duplicates in the “Open With” menu
   #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
   alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
   #+END_SRC
****** Recursively delete `.DS_Store` files
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias DSStorecleanup="find . -type f -name '*.DS_Store' -ls -delete"
  #+END_SRC
****** Empty trash
  # Empty the Trash on all mounted volumes and the main HDD.
  # Also, clear Apple’s System Logs to improve shell startup speed.
  # Finally, clear download history from quarantine. https://mths.be/bum
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"
  #+END_SRC

***** IP and web related aliases
****** IP addresses
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
  alias localip="ipconfig getifaddr en0"
  alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
  #+END_SRC

****** View HTTP traffic
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
  alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
  #+END_SRC
***** Encryption
****** OS X has no `md5sum`, so use `md5` as a fallback
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v md5sum > /dev/null || alias md5sum="md5"
  #+END_SRC
****** OS X has no `sha1sum`, so use `shasum` as a fallback
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v sha1sum > /dev/null || alias sha1sum="shasum"
  #+END_SRC
****** Canonical hex dump; some systems have this symlinked
  #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
  command -v hd > /dev/null || alias hd="hexdump -C"
  #+END_SRC
***** JavaScriptCore REPL
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
 [ -e "${jscbin}" ] && alias jsc="${jscbin}";
 unset jscbin;
 #+END_SRC

***** Trim new lines and copy to clipboard
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias c="tr -d '\n' | pbcopy"
 #+END_SRC

***** Show/hide hidden files in Finder
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias showHiddenFiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
 alias hideHiddenFiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
 #+END_SRC

***** Hide/show all desktop icons (useful when presenting)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias hideDesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
 alias showDesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
 #+END_SRC

***** URL-encode strings
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'
 #+END_SRC

***** Merge PDF files
 # Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'
 #+END_SRC

***** PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias plistbuddy="/usr/libexec/PlistBuddy"
 #+END_SRC

***** Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
 # (useful when executing time-consuming commands)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias badge="tput bel"
 #+END_SRC

***** Intuitive map function
 # For example, to list all directories that contain a certain file:
 # find . -name .gitattributes | map dirname
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias map="xargs -n1"
 #+END_SRC

***** One of @janmoesen’s ProTip™s
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	 alias "$method"="lwp-request -m '$method'"
 done
 #+END_SRC

***** Make Grunt print stack traces by default
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 command -v grunt > /dev/null && alias grunt="grunt --stack"
 #+END_SRC

***** Stuff I never really use but cannot delete either because of http://xkcd.com/530/
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias stfu="osascript -e 'set volume output muted true'"
 alias pumpitup="osascript -e 'set volume 7'"
 #+END_SRC

***** Kill all the tabs in Chrome to free up memory
 # [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"
 #+END_SRC

***** Lock the screen (when going AFK)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
 #+END_SRC

***** Reload the shell (i.e. invoke as a login shell)
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias reload="exec $SHELL -l"
 #+END_SRC

***** Homestead
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias homestead='function __homestead() { (cd ~/Homestead && vagrant $*); unset -f __homestead; }; __homestead'
 #+END_SRC
***** phps
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias phps='php -S 127.0.0.1:9000'
 #+END_SRC
***** webpack
 #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt
 alias wp='webpack'
 alias wpc='touch webpack.config.js'
 alias wds='webpack-dev-server'
 #+END_SRC

* File management

- org-agenda integration
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
    (file-expand-wildcards "~/Proposals/*.org")
    (file-expand-wildcards "~/Projects/*.org")
    (file-expand-wildcards "~/PersonalDevelopment/*.org")
    (file-expand-wildcards "~/College/*.org")
    (file-expand-wildcards "~/Business/*.org")
    (file-expand-wildcards "~/Finances/*.org")
)
#+END_SRC emacs-lisp


** organizer.org
*** Tasks
  :PROPERTIES:
  :CATEGORY: Task
  :END:
*** Important dates
  :PROPERTIES:
  :CATEGORY: Date
  :END:
**** Anniversary
**** Expiry Date of Credit Cards
Inform one week in advance
**** Bills to be paid
**** Membership days
**** Religious Holiday
**** Government Holiday
**** Conference Periods
**** College Events

** refile.org
Main org file for org-capture and todo tasks
** Proposals
For all the evil plans you have for the future.
*** commercial_ideas.org
*** whimsical_ideas.org
*** proposals.org
*** Subfolder 1
** Configuration
All your config files are to be stored here
*** config.org
For all your configuration file definitions
*** emacs_configuration.org
*** projectManagement.org
*** secrets.org
For account information and ssh keys.
** Archive
For archived documents that don't quite have a home but can't be deleted
*** archive.org
Archived sub trees
** Website :website:
*** website.org
For website source code
*** blog.org
Topic index for my blog

** Personal Development
*** online_learning.org
For all your online learning todos and planning
**** lynda
**** mit ocw
**** coursera
*** improvements.org
** College
*** college.org
All class information and deadlines. Treat as read-only during semester unless the professor gives test details during the semester.
*** Current Semester
**** Class 1
***** notes.org
***** textbook.pdf
***** Office Lens Scans
Not just Office Lens Scans but all scans in general. Just going to use Office Lens a lot.
Treat this folder as read only - don't delete anything.
***** Old Papers
**** Class 2
***** notes.org
***** textbook.pdf
***** Office Lens Scans
***** Old Papers
*** Previous semesters
** Business
*** business.org

**** System Maintenance
  :PROPERTIES:
  :CATEGORY: Maintenance
  :END:
**** Payroll
  :PROPERTIES:
  :CATEGORY: Payroll
  :END:
**** Accounting
  :PROPERTIES:
  :CATEGORY: Accounting
  :END:
**** Finances
  :PROPERTIES:
  :CATEGORY: Finance
  :END:
**** Hardware Maintenance
  :PROPERTIES:
  :CATEGORY: Hardware
  :END:
**** Tasks
  :PROPERTIES:
  :CATEGORY: Task
  :END:
**** Research and Development
  :PROPERTIES:
  :CATEGORY: Idea
  :END:
**** Notes
  :PROPERTIES:
  :CATEGORY: Note
  :END:
**** Purchase Order Tracking
  :PROPERTIES:
  :CATEGORY: PurchaseOrder
  :END:
**** Passwords
  :PROPERTIES:
  :CATEGORY: Password
  :END:
**** Clients & Associates
  :PROPERTIES:
  :CATEGORY: Contact
  :END:
**** Procedures
  :PROPERTIES:
  :CATEGORY: Workflow
  :END:
**** Checklists
  :PROPERTIES:
  :CATEGORY: Checklist
  :END:


**** COMMENT Stolen from somewhere
Business-related information and plans
- Clients
- Procedures
- Associates
- Media
- Checklists
- Work-in-progress

**** COMMENT Stolen from http://doc.norang.ca/org-mode.html#OrgFileStructure 
***** System Maintenance
***** Payroll
***** Accounting
***** Finances
***** Hardware Maintenance
***** Tasks
***** Research and Development
***** Notes
***** Purchase Order Tracking
***** Passwords

*** contacts.org
** Finances
*** Banks
  :PROPERTIES:
  :CATEGORY: Bank
  :END:
**** Account 1 - Bank 1
***** Account Number
***** Billing Address

*** Money
  :PROPERTIES:
  :CATEGORY: Money
  :END:
**** Archive
** Medical
*** medical.org for context and information
**** NMC Deira
**** NIMHANS
**** Medical Archive

** Asset Management
Need more advice here
*** Real Estate
Not exactly applicable now but should be in the future.
*** Vehicles
Not a concern now but will be in the future.
*** Warranties
Should keep scans of the warranty sticker
*** Electronics
*** Home Inventory
Mainly the fancier ones that require upkeep.
** Photos
Organized by trip.
** Documents
*** Passport 
*** ID
**** Emirates ID
**** Aadhar Card
**** Buzzcard
**** Driver's License
***** Dubai
***** United States

*** CV
Don't delete them anymore. Sort by year
*** Georgia Tech
*** US Admission
*** Medical
*** Digital Files
*** Misc Files
*** US Admission
*** CBSE - JEE
*** IIST
*** MIT
*** Music
*** National Olympiads
*** Organic Charts
*** Physics Project
*** Pictures
*** Plancess Demo CD
*** Ridge View
*** Travel Doc - Reservations
*** US
*** Vijaygiri
*** Vish
*** Vish - Digital Files + Photos
*** Vishakh's Essays

* To use

add to new project template http://blog.modelworks.ch/using-org-mode-to-keep-track-of-your-project-files/

special task category WAIT where you wait for input from someone

http://blog.modelworks.ch/removing-extra-blank-lines-in-emacs/ add hook after saving

org-sparse-tree to find all headlines with a certain tag.

There was a guy out there who described in painstaking detail each step he had to take to remake his configuration. Do that - especially for chrome and firefox extensions.

* Programming Languages
** Python configuration

 (Slightly edited from [[https://medium.com/@henriquebastos/the-definitive-guide-to-setup-my-python-workspace-628d68552e14][Medium Link]]. Credit to Henrique Bastos)

 Requirements: 
 + I need to be able to use multiple versions of CPython 2 and 3, as well as other interpreters like PyPy and Anaconda;
 + Python3 must be the default for everything. However, I should be able to use Python 2 when I wish to.
 + Jupyter Notebook should work with Python2 and Python3, and is able to detect the active virtualenv at jupyter notebook execution time.
 + A single iPython Console for Python3 and one iPython Console for Python2, so no need to install iPython on my projects' virtualenvs.
 + I want useful programs written in Python (ex: youtube-dl) globally available on my system without contaminating the global interpreters and avoiding any library version issues.
 + I want to use virtualenvwrapper to develop my projects allowing me to change context/project quickly with one command.
 + I want this setup to be maintainable without adding too many thing to PATH.

*** Why I use pyenv
 For me pyenv is the best way to install Python on a Mac or Linux. Everything gets installed under your home directoy, without tampering with the rest of the system. Besides that, it supports many different Python implementation such as PyPy, Anaconda, CPython, etc. All with one command.

 #+NAME: command_line_tools
 #+BEGIN_SRC txt
 pyenv
 pyenv-virtualenv
 pyenv-virtualenvwrapper
 #+END_SRC

