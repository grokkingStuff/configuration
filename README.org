#+TITLE: Configs & Dotfiles
#+AUTHOR: Vishakh Kumar
#+EMAIL: vishakhpradeepkumar@gmail.com
#+LICENSE: GPLv3
#+LANGUAGE: en
#+OPTIONS: num:5 whn:2 toc:4 H:6

#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS

[[https://travis-ci.org/grokkingStuff/configuration.svg?branch=master]]

#+NAME: install.sh
#+CAPTION: The overall structure of install.sh
#+BEGIN_SRC sh :tangle install.sh :noweb yes :exports code
#!/usr/bin/env bash
## Description: Main install script


                  <<author_information>>


<<license_information>>

   
<<system_library>>
   

# MAIN CONTROL FLOW
function main() {

#<<preamble_library>>

#####################################################################################################
   bot "Installing Applications!"
   <<applications_to_install>>
   bot "Installed applications!"

   bot "Creating Organization!"
   <<organization>>
   bot "Created organization!"
#####################################################################################################

# Hello there!
echo "
<<test>>
<<test_>>
" > test_install.bats
bats test_install.bats

   }

main "$@"
#+END_SRC

** Author Information
Because someone needs to take the blame for when this script goes insane.
Seriously, someone take this piece of shit code from me and make it better.
Free brownies for whoever does that.

 #+NAME: author_information
 #+BEGIN_SRC sh :noweb yes
################################################
#                                              #
#              Author Information              #
#                                              #
# Author: Vishakh Pradeep Kumar                #
# Email: grokkingStuff@gmail.com on 04-2018    #
# Current maintainer: Vishakh Pradeep Kumar    #
################################################
 #+END_SRC

*** Spacemacs Configuration                                       :spacemacs:
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Vishakh Kumar"
      user-mail-address "vishakhpradeepkumar@gmail.com")
      ;; calendar-latitude 37.4
      ;; calendar-longitude -122.1
      ;; calendar-location-name "Mountain View, CA")
#+END_SRC

** License information
Even if it seems pretentious, it's good to have a license so that other people can use it. Since this code isn't exactly going to be used in a production environment, I'm going to stick a GPL license on it.

#+NAME: license_information
#+BEGIN_SRC sh :noweb yes
#####################################################################################
#                                                                                   #
#                                License Information                                #
#                                                                                   #
# License: GPLv2, see http://www.fsf.org/licensing/licenses/info/GPLv2.html         #
# and accompanying license "LICENSE.txt". Redistribution + modification under this  #
# license permitted.                                                                #
# If you enclose this script or parts of it in your software, it has to             #
# be accompanied by the same license (see link) and the place where to get          #
# the recent version of this program: https://testssl.sh                            #
# Don't violate the license.                                                        #
#                                                                                   #
# USAGE WITHOUT ANY WARRANTY, THE SOFTWARE IS PROVIDED "AS IS". USE IT AT           #
# your OWN RISK                                                                     #
#####################################################################################
#+END_SRC

* Tests
We'll be interweaving tests with code in this org file and seperating them in files. 

#+BEGIN_SRC sh :tangle test.bats :noweb yes
#!./test/libs/bats/bin/bats

<<test>>
#+END_SRC

To pull all these submodules into test/libs, run the below from the root of your git repo and commit the result:
#+BEGIN_SRC ah
mkdir -p test/libs

git submodule add https://github.com/bats-core/bats-core test/libs/bats-core
#+END_SRC

** Continuous Integration
We'll be using Travis CI for continuous integration.

#+BEGIN_SRC yaml :tangle .travis.yml
before_install: 
- docker pull opensuse/tumbleweed # Use opensuse Tumbleweed as test
- docker run -d -p 127.0.0.1:80:4567 opensuse/tumbleweed /bin/sh -c "cd /root/sinatra; bundle exec foreman start;"
- docker ps -a
- docker run opensuse/tumbleweed /bin/sh -c "cd /root/sinatra; bundle exec rake test"



sudo: required
language: bash
services:
  - docker

script:
    - ./test/libs/bats/bin/bats test.bats
#+END_SRC


* Bash Helper Functions
Bash is a pain in the ass to work with if you need to be safe. This library allows you to write bash that's well-organized, somewhat tested, and hopefully cross platform.

** Preamble
  For all the stuff that doesn't really matter to the structure of the program but is quite important for everything else.
  Most of this should be taken care of by the configBot.
 #+NAME: preamble_library
 #+CAPTION: Preamble src block
  #+BEGIN_SRC sh :noweb yes
  #+END_SRC
*** Example of an implementation of getopts and constants that's not bad
 #+CAPTION: Implementation of getopts
 #+BEGIN_SRC sh :noweb yes
 #########################
 # Constants Declaration #
 #########################

 # Home computer information
 USER_VCS_REPO="$(system::vcs_repo_root)"
 USER_MACHINE="$(system::detect_operating_system)"

 # Remote user information
 REMOTE_IPADDRESS='143.215.98.17'
 REMOTE_USER='pi'
 REMOTE_USER_PASSWORD='raspberry'
 REMOTE_LOCATION='/home/pi/Github/2018'

 #######################
 # User input & Flags  #
 #######################

 while getopts ":iufph:*" o; do
     case "${o}" in

         i) ## IP Address flag. Specify ip address. Default is 143.215.98.17
             REMOTE_IPADDRESS="${OPTARG}" 
             ;;

         u) ## Remote username flag. Specify username of raspberry pi. Default is 'pi'
             REMOTE_USER="${OPTARG}" 
             ;;

         f) ## Location of remote folder flag. Specify location of github repo on raspberry pi. Change only if not working on 2018 folder 
             REMOTE_LOCATION="${OPTARG}"
             ;;

         p) ## Password flag. Specify a password for user on remote server
             REMOTE_USER_PASSWORD="${OPTARG}"
             ;;

         h) ## Help flag. Displays flag options 
             system::usage
             exit 0
             ;;

         :)  # For when a mandatory argument is skipped.
             system::err "Option -$OPTARG requires an argument."
             system::usage
             exit 1
             ;;
         *) 
             system::err "Unexpected option ${flag}"
             system::usage
             exit 1 
             ;;
     esac
 done

 ##############################
 # Constants turned read-only #
 ##############################

 # Home computer information
 readonly USER_VCS_REPO
 readonly USER_MACHINE

 # Remote user information
 readonly REMOTE_IPADDRESS
 readonly REMOTE_USER
 readonly REMOTE_USER_PASSWORD
 readonly REMOTE_LOCATION
 #+END_SRC

** System library                                              :library:bash:

 Functions that are used to query or support the system fall under this library.

 - I can't run this in CMD.EXE! What do I do?

   CMD.EXE does not have an inbuilt utility to run sh files. You can install a Linux shell for Windows which should be more than adequate for your purposes. Alternatively, you can install Powershell & Cygwin, although the Linux shell is definitely recommended. Just to be clear, CMD.EXE can run scripts! It's just that no sane man would build a good script in a .cmd file out of his own volition.

 - This doesn't run on my OS.

   Huh. That's pretty interesting. This script should run on any system that supports bash (although it may have a few eccentricities.)
   If you're sure it's not your fault, you should totally send me an email about that.

 - This particular function seems too useful for a simple script like this. It's not bad.

   I'm glad you think so! It's really there because I fell down a rabbit hole and I overestimated the importance of being ultra-portable. 
   Use it if you can in your own scripts!


 #+NAME: system_library
 #+BEGIN_SRC sh :noweb yes 
 
 # SYSTEEM LIBRARY
 
 <<system::help_dialog>>
 <<system::detect_operating_system>>
 <<system::err>>
 <<system::check_required_programs>>
 #<<system::vcs_repo_root>>
 #<<system::color_initialization>>
 <<system::echo>>
 #+END_SRC

*** Help prompt
  A quick and effective help function that uses the comments in the flag case block. Scans this file for a "##" in front of a ")" and displays those lines exclusively.
  Restrict comments to single # to avoid unnecessary mixup.

  #+NAME: system::help_dialog
  #+BEGIN_SRC sh
 ########################################################
 # Displays a list of all flags with their descriptions
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns:
 #   None
 ########################################################
 function system::usage() {
     echo "$0 usage:" &&              \
       grep "[[:space:]].)\\ ##" "$0" |  \         # Find all line in script that have '##' after a ')'
       sed 's/##//' |                 \         # Replace all '##' with nothing
       sed -r 's/([a-z])\)/-\1/';              # TODO Can't remember
 }
  #+END_SRC
*** Detect operating system                                   :function:bash:
 Since this command will be executed by different people of multiple operating systems, I've decided to use as many bash built-ins as possible for portability. However, there are still things that need to be set for each operating system. This code block detects the operating system and makes it available in the variable $MACHINE. I was gonna hack together a way to do this using the uname command but I think using pre-defined $OSTYPE variable is cleaner.

 #+NAME: system::detect_operating_system
 #+CAPTION: bash function to detect the operating system the shell is running on.
 #+BEGIN_SRC sh
 #################################################################
 # Detects the operating system that this script is being run on
 # Globals:
 #   OSTYPE
 # Arguments:
 #   None
 # Returns:
 #   MACHINE
 #################################################################
 function system::detect_operating_system() {

     local MACHINE
     MACHINE=""
    
     case "$OSTYPE" in

     #########################################################################
     # *nix systems                                                          #
     #########################################################################
         solaris*)
             MACHINE="SOLARIS"                                                     # Do people even use Solaris anymore? Gosh, haven't heard this name in a while.
             ;;
         darwin*)
             MACHINE="OSX"
             ;;
         linux*)
             MACHINE="LINUX"
             ;;
         bsd*)
             MACHINE="BSD"
             ;;
     #    aix*)
     #        MACHINE="AIX"
     #        ;;
     #    #Was gonna add AIX but I dunno if it has the $OSTYPE variable and I don't really care.
    

     #########################################################################
     # windows systems                                                       #
     #########################################################################
         cygwin*)
             MACHINE="WINDOWS"
             ;&                                                                    # Since Windows has two options for $OSTYPE, we're gonna let it cascade into the next case
         msys*)
             MACHINE="WINDOWS"

                                                                                   # We're using uname -s to figure out which shell in Windows we're using.
             unameOut="$(uname -s)"
             case "${unameOut}" in
                 CYGWIN*)
                     MACHINE="WINDOWS-CYGWIN"
                     # This should work for git shell as well.
                     # I'm not sure why you're using git-shell to do anything except run git commands but cool. You do you, mate.
                     ;;
                 MINGW32_NT*)
                     MACHINE="WINDOWS-32"
                     ;;
                 MINGW64_NT*)
                     MACHINE="WINDOWS-64"
                     ;;
                 Linux*)
                     MACHINE="WINDOWS-POWERSHELL"
                     # Not sure why Powershell returns Linux when uname-s is passed to it. Seems janky.
                     echo "This script will not run in Powershell. Please install a bash shell."
                     echo "Terminating program."
                     exit 1

             esac
             ;;
    
     #########################################################################
     # This shouldn't happen but I'm super interested if it does!            #
     #########################################################################
         *)
             MACHINE="unknown: $OSTYPE"
             echo "I don't know what you're running but I'm interested! Send me an email at grokkingStuff@gmail.com"
             echo "I'm guessing you're running some sort of custom unix machine so as long as you have access to bash, you should be good."
             echo "I mean, seriously, what are you running! Is it a really old system and if so, can you send me pics? pretty please!"
             echo "If you do have issues, do send me a email but I can't promise I can make it work on your system."
             ;;
     esac

     # Time to return the answer
     return "$MACHINE"
 }
 #+END_SRC

*** Sending time-tagged strings into STDERR                   :function:bash:

 All error messages should go to STDERR (standard error), including user defined errors. This function attaches a date and time to a string and passes it to STDERR
 Reference: [[https://google.github.io/styleguide/shell.xml?showone=STDOUT_vs_STDERR#STDOUT_vs_STDERR][Google Style Sheet: STDOUT vs STDERR]]

 #+NAME: system::err
 #+CAPTION: Function to generate errors and logs with attached date and time.
 #+BEGIN_SRC sh
 ###########################################################
 # Allows for user to send time-tagged strings into STDERR
 # Globals:
 #   None
 # Arguments:
 #   Array of String(s)
 # Returns:
 #   None
 ###########################################################
 function system::err() {
   echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
 }
 #+END_SRC

*** Check if required programs are installed                  :function:bash:
 While this should ideally be taken care of by testing on different systems and by using portable bash builtins, there really isn't a substitute to checking if the command/program you're looking for is installed on the computer.

 #+NAME: system::check_required_programs
 #+BEGIN_SRC sh
 #####################################################################################
 # Checks if the list of commands given to it is executable and available on a system
 # Globals:
 #   None
 # Arguments:
 #
 # Returns:
 #   None
 #####################################################################################
 function system::check_required_programs() {
   for p in "${@}"; do
     hash "${p}" 2>&- || \
         { system::err "Required program \"${p}\" not installed or in search PATH.";
           exit 1;
         }
   done
 }
 #+END_SRC

*** Detect VCS system and find root directory                 :function:bash:

 So it turns out that different VCS have different ways of querying for the location of the root folder. Since I've only used git and I've dabbled in Mercurial, this code might be outdated and downright wrong. However, gonna stick this in here since it might be handy.

 #+NAME: system::vcs_repo_root
 #+CAPTION: Function to return root of vcs repository when possible 
 #+BEGIN_SRC sh
 ##########################################################################################
 # Checks if current folder is a VCS and if so, finds the location of the root repository.
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns
 #   VCS_REPO_ROOT as String
 ##########################################################################################
 function system::vcs_repo_root() {

   local VCS_REPO_ROOT;
   VCS_REPO_ROOT="";

   # Check if repository is a git repo
   if git rev-parse --is-inside-work-tree 2> /dev/null; then
     # This is a valid git repository.
     VCS_REPO_ROOT="$(git rev-parse --show-toplevel)";

   elif hg --cwd ./ root 2> /dev/null; then
     # This is a valid mercurial repository.
     VCS_REPO_ROOT="$(hg root)";

   elif svn ls ./ > /dev/null; then
     # This is a valid svn repository.
     VCS_REPO_ROOT="$(svn info --show-item wc-root)";
   fi
 
   if [[ -z VCS_REPO_ROOT ]]; then
     echo $VCS_REPO_ROOT;
   else
     system:err "Current directory is not within a vcs repository.";
   fi 
 }
 #+END_SRC

*** Colors & Text attributes                         :function:constant:bash:

 Because all the colors and fancy effects! Shamelessly stolen from https://github.com/ralish/bash-script-template/blob/stable/template.sh 

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|


 #+NAME: system::color_initialization
 #+BEGIN_SRC sh :noweb yes
 ################################################
 # Initialise colour variables and text options
 # Global: 
 #   None
 # Arguments:
 #   None:
 # Returns:
 #   None
 ################################################
 function colour_init() {
     if [[ -z ${no_colour-} ]]; then

         readonly reset_color="$(tput sgr0 2> /dev/null || true)"
         <<colors_text_attributes>>

         <<colors_foreground>>

         <<colors_background>>
     else
         readonly reset_color=''
         <<colors_null_values>>
     fi
 }
 #+END_SRC

**** colors_text_attributes                                   :constant:bash:

Text attributes can be changed by writing "ta_" followed by the particular text attribute you want. The options are:

#+CAPTION: Different text attribute options
 |-----------+---------------------------------|
 | Command   | Description                     |
 |-----------+---------------------------------|
 | tput bold | # Select bold mode              |
 | tput dim  | # Select dim (half-bright) mode |
 | tput smul | # Enable underline mode         |
 | tput rmul | # Disable underline mode        |
 | tput rev  | # Turn on reverse video mode    |
 | tput smso | # Enter standout (bold) mode    |
 | tput rmso | # Exit standout mode            |
 |-----------+---------------------------------|

 #+NAME: colors_text_attributes
 #+BEGIN_SRC sh
 # Text attributes
 readonly ta_bold="$(tput bold 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_uscore="$(tput smul 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_blink="$(tput blink 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_reverse="$(tput rev 2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly ta_conceal="$(tput invis 2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_foreground                                        :constant:bash:

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|

 #+NAME: colors_foreground
 #+BEGIN_SRC sh
 # Foreground codes
 readonly fg_black="$(tput setaf 0     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_blue="$(tput setaf 4      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_cyan="$(tput setaf 6      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_green="$(tput setaf 2     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_magenta="$(tput setaf 5   2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_red="$(tput setaf 1       2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_white="$(tput setaf 7     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly fg_yellow="$(tput setaf 3    2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_background                                        :constant:bash:

 #+CAPTION: Colors available for tput
 |-----+---------+---------------+-------|
 | Num | Colour  | #define       | R G B |
 |-----+---------+---------------+-------|
 |   0 | black   | COLOR_BLACK   | 0,0,0 |
 |   1 | red     | COLOR_RED     | 1,0,0 |
 |   2 | green   | COLOR_GREEN   | 0,1,0 |
 |   3 | yellow  | COLOR_YELLOW  | 1,1,0 |
 |   4 | blue    | COLOR_BLUE    | 0,0,1 |
 |   5 | magenta | COLOR_MAGENTA | 1,0,1 |
 |   6 | cyan    | COLOR_CYAN    | 0,1,1 |
 |   7 | white   | COLOR_WHITE   | 1,1,1 |
 |-----+---------+---------------+-------|

 #+NAME: colors_background
 #+BEGIN_SRC sh
 # Background codes
 readonly bg_black="$(tput setab 0     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_blue="$(tput setab 4      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_cyan="$(tput setab 6      2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_green="$(tput setab 2     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_magenta="$(tput setab 5   2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_red="$(tput setab 1       2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_white="$(tput setab 7     2> /dev/null || true)"
 printf '%b' "$ta_none"
 readonly bg_yellow="$(tput setab 3    2> /dev/null || true)"
 printf '%b' "$ta_none"
 #+END_SRC

**** colors_null_values                                       :constant:bash:
 If we don't use colors in our code but still put references to it in our code, it might cause annoying issues.
 We'll be setting them to '' so that nothing happens and our code is safe.
 #+NAME: colors_null_values
 #+BEGIN_SRC sh
 # Text attributes
 readonly ta_bold=''
 readonly ta_uscore=''
 readonly ta_blink=''
 readonly ta_reverse=''
 readonly ta_conceal=''

 # Foreground codes
 readonly fg_black=''
 readonly fg_blue=''
 readonly fg_cyan=''
 readonly fg_green=''
 readonly fg_magenta=''
 readonly fg_red=''
 readonly fg_white=''
 readonly fg_yellow=''

 # Background codes
 readonly bg_black=''
 readonly bg_blue=''
 readonly bg_cyan=''
 readonly bg_green=''
 readonly bg_magenta=''
 readonly bg_red=''
 readonly bg_white=''
 readonly bg_yellow=''
 #+END_SRC

*** POSIX compliant echo                                      :function:bash:

 While echo is a rather common tool, it's actually terribly designed. It's only portable if you don't any use flags and it's output isn't consistent. 
 We'll be using printf instead, which is POSIX-compliant and much better designed. As a special function, it will be listed as both system::echo and echo, for ease of use.
#+NAME: system::echo
 #+BEGIN_SRC sh
 ######################################################
 # Makes echo POSIX-compliant while retaining options
 # Globals:
 #   None
 # Arguments:
 #   None
 # Returns:
 #   None
 ######################################################
 function system::echo () (
 fmt=%s end=\\n IFS=" "

 while [ $# -gt 1 ] ; do
 case "$1" in
 [!-]*|-*[!ne]*) break ;;
 *ne*|*en*) fmt=%b end= ;;
 *n*) end= ;;
 *e*) fmt=%b ;;
 esac
 shift
 done

 printf "%s%s%s" "$fmt" "$end" "$*"
 )

 function ok() {
     echo -e "[ok] " "$1"
 }

 function bot() {
     echo -e "\\[._.]/ - " "$1"
 }

 function running() {
     echo -en "\\u21d2" "$1" ": "
 }

 function action() {
     echo -en "\\u21d2 $1..."
 }

 function warn() {
     echo -e "[warning]" "$1"
 }

 function error() {
     echo -e "[error] " "$1"
 }
  #+End_SRC

* Organization
#+NAME: organization
#+BEGIN_SRC sh :noweb yes 
if [ -d "~/Dropbox" ]; then
    dropbox start
    dropbox status

    #<<organization_folder>>

    #<<organization_file>>
fi
#+END_SRC

** Dropbox
*** Installation                                                    :install:
#+NAME: install
#+BEGIN_SRC sh 
dropbox
#+END_SRC

** Folder Organization
*** Projects
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Projects
ln ~/Dropbox/Projects ~/Projects
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Projects folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Projects ]
 [ -d ~/Projects ]
}
#+END_SRC
*** Agenda
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Agenda
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Agenda folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Agenda ]
}
#+END_SRC

*** Documents
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Documents
ln ~/Dropbox/Documents ~/Documents
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Documents folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Documents ]
 [ -d ~/Documents ]
}
#+END_SRC

*** Configuration


- org-agenda integration
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
    (file-expand-wildcards "~/Proposals/*.org")
    (file-expand-wildcards "~/Projects/*.org")
    (file-expand-wildcards "~/PersonalDevelopment/*.org")
    (file-expand-wildcards "~/College/*.org")
    (file-expand-wildcards "~/Business/*.org")
    (file-expand-wildcards "~/Finances/*.org")
)
#+END_SRC emacs-lisp



#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Configuration
ln ~/Dropbox/Configuration ~/Configuration
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Configuration folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Configuration ]
 [ -d ~/Configuration ]
}
#+END_SRC

*** Archive
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Archive
ln ~/Dropbox/Archive ~/Archive
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Archive folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Archive ]
 [ -d ~/Archive ]
}
#+END_SRC

*** Website
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Website
ln ~/Dropbox/Website ~/Website
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Website folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Website ]
 [ -d ~/Website ]
}
#+END_SRC

*** Learning
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Learning
ln ~/Dropbox/Learning ~/Learning
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Learning folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Learning ]
 [ -d ~/Learning ]
}
#+END_SRC

*** Medical
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/Medical
ln ~/Dropbox/Medical ~/Medical
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the Medical folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/Medical ]
 [ -d ~/Medical ]
}
#+END_SRC

*** Asset Management
#+NAME: organization_folder
#+BEGIN_SRC sh
touch ~/Dropbox/AssetManagement
ln ~/Dropbox/AssetManagement ~/AssetManagement
#+END_SRC

#+NAME: test_
#+BEGIN_SRC sh 
@test "Test if the AssetManagement folder exists in the Dropbox folder and in the home directory" {
 [ -d ~/Dropbox/AssetManagement ]
 [ -d ~/AssetManagement ]
}
#+END_SRC

*** Contacts

* Applications

In this section, we'll be listing the application name and general info, its package name for our package manager to install it, and any configuration files related to said software.

This allows us to create a list of all applications that we'll need in a single file while keeping them all nice and organized in seperate categories. Keep in mind that programming languages are not included in this section (they have special requirements for a proper development environment) but applications that are installed using a language's package manager belong here.

+ *Conventions*
  + Any headline that's an application must have the application tag. 
    + If the application name is not immediately indicative of its purpose, a brief description of its type can be included after a hypen.
  + Any installation code block in this section should have the tag :install:, headline Installation and name 'install' (install_ if you don't want it to be tested.)
  + All configuration files must have a parent headline called 'Configuration' with tag :configuration:
    + If the configuration file is worthy of it's own org file, a link shall be provided for the same.
  + If an application is installed with a programming language's package manager, use an appropriate tag and src block name.
    - 
      | Language | tag     | src block name  | 
      | Python 2 | python2 | python2_install |
      | Python 3 | python3 | python3_install |

#+BEGIN_EXAMPLE 
  ** General application category
  *** Application name - type of application (if required)        :application:
  **** Installation
  #+NAME: install               # install_ if you don't want it to be tested
  #+BEGIN_SRC sh :padline no :tangle no :noweb yes
  
  #+END_SRC
#+END_EXAMPLE

#+NAME: applications_to_install
#+BEGIN_SRC sh :noweb yes
echo "\
<<install_>>
<<install>>" > install.txt

cat install.txt | while read line; do action "Installing $line"; sudo zypper -iq --gpg-auto-import-keys --no-refresh in -y $line; done

rm install.txt

echo "\n\n"
#+END_SRC

#+NAME: test
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
@test "Test if applications are installed" {
    command -v <<install>>
}
#+END_SRC

** Shells
Plenty of shells for a hermit crab to choose. I'm going with fish for my interactive shell and bash for my scripts. This lets me have portable scripts while having a decent shell to work with. Will try zsh for specific types of repositories.
*** fish                                                        :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
fish
#+END_SRC

*** bash                                                        :application:
**** Installation                                                   :install:
While you shouldn't really have to install bash on a system (since it should just be there), I'm adding this for the sake of completionists everywhere.
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
bash
#+END_SRC

**** Configuration                                            :configuration:

Home is where +the heart is+ your aliases are

***** Navigation
****** Easier navigation: .., ..., ...., and .....
  #+BEGIN_SRC sh :tangle bashrc.txt :padline no
  alias ..="cd .."
  alias ...="cd ../.."
  alias ....="cd ../../.."
  alias .....="cd ../../../.."
  #+END_SRC
****** Shortcuts to commonly used folders
  #+BEGIN_SRC sh :tangle bashrc.txt :padline no
  alias downloads="cd ~/Downloads"
  alias desktop="cd ~/Desktop"
  alias projects="cd ~/Projects"
  #+END_SRC
****** Shortcuts to commonly used commands
  #+BEGIN_SRC sh :tangle bashrc.txt :padline no
  alias g="git"
  alias h="history"
  #+END_SRC

***** grep
****** Always enable colored `grep` output
  # Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  #+END_SRC

***** Enable aliases to be sudo’ed
 #+BEGIN_SRC sh :tangle bashrc.txt
 alias sudo='sudo '
 #+END_SRC

***** Get week number
 #+BEGIN_SRC sh :tangle bashrc.txt
 alias week='date +%V'
 #+END_SRC

***** Stopwatch
  #+BEGIN_SRC sh :tangle bashrc.txt
 alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
 #+END_SRC

 #+RESULTS:
***** COMMENT Updates and Cleanups
****** COMMENT Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias update='sudo softwareupdate -i -a; brew update; brew upgrade --all; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update'
  #+END_SRC
****** COMMENT Flush Directory Service cache
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"
  #+END_SRC
****** COMMENT Clean up LaunchServices to remove duplicates in the “Open With” menu
   #+BEGIN_SRC sh :tangle bashrc.txt
   alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
   #+END_SRC
****** COMMENT Recursively delete `.DS_Store` files
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias DSStorecleanup="find . -type f -name '*.DS_Store' -ls -delete"
  #+END_SRC
****** COMMENT Empty trash
  # Empty the Trash on all mounted volumes and the main HDD.
  # Also, clear Apple’s System Logs to improve shell startup speed.
  # Finally, clear download history from quarantine. https://mths.be/bum
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"
  #+END_SRC

***** Encryption
****** OS X has no `md5sum`, so use `md5` as a fallback
  #+BEGIN_SRC sh :tangle bashrc.txt
  command -v md5sum > /dev/null || alias md5sum="md5"
  #+END_SRC
****** OS X has no `sha1sum`, so use `shasum` as a fallback
  #+BEGIN_SRC sh :tangle bashrc.txt
  command -v sha1sum > /dev/null || alias sha1sum="shasum"
  #+END_SRC
****** Canonical hex dump; some systems have this symlinked
  #+BEGIN_SRC sh :tangle bashrc.txt
  command -v hd > /dev/null || alias hd="hexdump -C"
  #+END_SRC

***** Intuitive map function
 # For example, to list all directories that contain a certain file:
 # find . -name .gitattributes | map dirname
 #+BEGIN_SRC sh :tangle bashrc.txt
 alias map="xargs -n1"
 #+END_SRC

***** One of @janmoesen’s ProTip™s
 #+BEGIN_SRC sh :tangle bashrc.txt
 for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	 alias "$method"="lwp-request -m '$method'"
 done
 #+END_SRC

***** Fun Stuff
****** Stuff I never really use but cannot delete either because of http://xkcd.com/530/
  #+BEGIN_SRC sh :tangle bashrc.txt
  alias stfu="osascript -e 'set volume output muted true'"
  alias pumpitup="osascript -e 'set volume 7'"
  #+END_SRC

****** Starwars
Don't remember who showed me this in the fifth grade but it's awesome and it stuck. Thanks!

#+BEGIN_SRC sh :tangle bashrc.txt :padline no
alias starwars="telnet towel.blinkenlights.nl"
#+END_SRC

*** zsh                                                         :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
zsh
#+END_SRC

** Notifications
*** libnotify                                                   :application:

 Use notify-send to create notifications from terminal. Use C-c C-c to execute this code block for an example

 #+BEGIN_SRC sh
 notify-send 'Hello world' 'Hello world'
 #+END_SRC
**** Installation                                                   :install:
 #+NAME: install_ 
 #+BEGIN_SRC sh
 libnotify-tools
 #+END_SRC



 #+RESULTS:

** Browsers
*** Chromium                                                    :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
chromium
#+END_SRC

*** Firefox                                                     :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
firefox
#+END_SRC

*** Tor                                                         :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
tor
#+END_SRC

** Text editors
*** Emacs                                                       :application:

Include link to spacemacs installation and configuration files
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
emacs
#+END_SRC

** cURL configurations options

 https://curl.haxx.se/docs/manpage.html


*** Limit the time (in seconds) the connection is allowed to take.
 #+BEGIN_SRC sh
 connect-timeout = 60
 #+END_SRC
*** Follow HTTP redirects.
 #+BEGIN_SRC sh
 location
 #+END_SRC
*** Display progress as a simple progress bar.
 #+BEGIN_SRC sh
 progress-bar
 #+END_SRC
*** Show error messages.
 #+BEGIN_SRC sh
 show-error
 #+END_SRC
*** Send a fake UA string for the HTTP servers that sniff it.
 #+BEGIN_SRC sh
 user-agent = "Mozilla/5.0 Gecko"
 #+END_SRC

** Version Control
*** Git                                                         :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
git
#+END_SRC

**** Spacemacs Layer                                              :spacemacs:
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; git version control ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    git                    ;;
    github                 ;;
    magit                  ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

**** Configuration                                            :configuration:
***** TODO COMMENT git config
   What would you do without our favourite git config?
   Or rather, what can you do to avoid forgetting that the damn thing doesn't exist anytime you use a new machine.
   This should make life much better (and less frustrating.)

   As for why we've doing this via commands instead of just dumping all our settings in a .gitconfig file?
   Well, this script can be run on any system and I'd rather git know where to install stuff than have to know it myself.
   Sure it's ugly but it works. And more importantly, I have a reference for when I have to do this for the thousandth time on someone else's computer;
   I don't necessarily want to overwrite their script (if it even exists) and a command just works.

   In short, it allows me to refer to this document anytime I want and copy paste code without thinking.
****** User name and email
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global user.name 'Vi Kumar'
   git config --global user.email 'grokkingStuff@gmail.com'
   #+END_SRC

****** Default Editor
   Changing the editor to vi because emacs is too bulky for this.
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global core.editor $EDITOR
   #+END_SRC

****** git compression
   Changing the git compression to be best. I tend to use VCS where I shouldn't.
   + 0 - no compression/highest speed
   + 9 - best compression/slowest speed
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global core.compression 9
   #+END_SRC

****** autocorrect common mistakes
   My fingers are never really under my control.
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global help.autocorrect 1
   #+END_SRC

****** Colored Output
   Allowing all git commands to use colored output.
   Because a little bit of color ain't never gonna hurt nobody.
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global color.ui auto
   #+END_SRC

****** Git Aliases
   Because aliases are pretty handy when you find yourself repeating the same commands over and over again.
   Honestly, everything in this list is more important then everything above.
******* Tweak defaults
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global alias.diff diff --word-diff
   git config --global alias.branch branch -ra
   git config --global alias.grep grep -Ii
   git config --global alias.bra branch -ra
   git config --global alias.ai add --interactive
   #+END_SRC

******* Common git aliases
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   # Common git aliases
   git config --global alias.st status
   git config --global alias.ci commit
   git config --global alias.co checkout
   git config --global alias.br branch
   #+END_SRC

******* Pretty History
   #+BEGIN_SRC sh :tangle git/git_config.sh
   # Gives you a pretty history
   git config --global alias.lg log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
   git config --global alias.lga log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --branches
   #+END_SRC

   Should probably work on this someday. Would be nice to see multiple options for a git history instead of memorising each one.
   #+BEGIN_SRC sh
   hist = !echo ''/
       read -p "What kind of history do you want?" ans
       case $ans in
           [1a]* ) make install; break;;
           [2b]* ) exit;;
           [3c]* ) exit;;
           [4d]* ) exit;;
           * ) echo "Select a valid option.";;
   #+END_SRC

******* Show configured aliases
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global alias.aliases !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
   #+END_SRC

******* Rename branch to done-branch
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global alias.done "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
   #+END_SRC

******* Reset Aliases
   Please try to avoid them. Please! I hate having to deal with this.......
   #+BEGIN_SRC sh :tangle git/git_config.sh :padline no
   git config --global alias.r reset
   git config --global alias.r1 reset HEAD^
   git config --global alias.r2 reset HEAD^^
   git config --global alias.rh reset --hard
   git config --global alias.rh1 reset HEAD^ --hard
   git config --global alias.rh2 reset HEAD^^ --hard
   #+END_SRC

***** TODO COMMENT git ignore
   Because no one should never have to deal with adding specific gitignores for every single project.
   Especially when it comes to temporary files created by IDEs and OS-specific files.
   Also it's super annoying to manually remove files each and every time you commit.

   That would be a humans rights violation. Even genocidal dictators don't go that far in order to torture you.
   Right?

   #+BEGIN_SRC sh :tangle git/git_ignore.sh
   # move your globalgitignore from the appropiate folder to the home directory.
   mv ./gitignore_global.txt $HOME/.gitignore_global

   # actually make the file the global ignore
   git config --global core.excludesfile $HOME/.gitignore_global
   #+END_SRC

****** .gitignore_global
   As you can see, the .gitignore_global is an actual file. The file will be called gitignore_global.txt
   We'll be writing our settings into the gitignore_global.txt file for our git_configuration script to use.
******* Compiled Source
   #+BEGIN_SRC sh :tangle git/gitignore_global.txt :padline no
   *.com
   *.class
   *.dll
   *.exe
   *.o
   *.so
   #+END_SRC

******* Packages
   It's better to unpack these files and commit the raw source.
   git has its own built in compression methods.
   #+BEGIN_SRC sh :tangle git/gitignore_global.txt :padline no
   *.7z
   *.dmg
   *.gz
   *.iso
   *.jar
   *.rar
   *.tar
   *.zip
   #+END_SRC

******* Logs and databases
   It's for the best that you don't reveal secret logs and databases. Data is private - keep it that way.
   #+BEGIN_SRC sh :tangle git/gitignore_global.txt :padline no
   *.log
   *.sql
   *.sqlite
   #+END_SRC

******* OS generated files
   #+BEGIN_SRC sh :tangle git/gitignore_global.txt :padline no
   .DS_Store
   .DS_Store?
   ._*
   .Spotlight-V100
   .Trashes
   ehthumbs.db
   Thumbs.db
    #+END_SRC

******* Codekits
   #+BEGIN_SRC sh :tangle git/gitignore_global.txt :padline no
   .sass-cache/
   .codekit-config.json
   config.codekit
   #+END_SRC

***** TODO COMMENT git attribute
   Kinda need to add to this section. I feel that a list of git attributes for each language would be helpful.
***** TODO COMMENT git-lfs
   Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git,
   while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.

****** Installation
   #+BEGIN_SRC sh :tangle git/git_config.sh
   $PACKAGEMANAGER install git-lfs
   git lfs install
   #+END_SRC

****** Use in a repo
   If you want to use git-lfs in a repository, simply apply the lfs install command inside the repo.
   #+BEGIN_SRC sh :tangle no
   # inside your repo
   git lfs install
   #+END_SRC

   This will update the pre-push hook for that git repo.

****** Speeding up clones containing a lot of lfs files
   If you're cloning a repository with a large number of LFS files, the explicit git lfs clone command offers far better performance.
   It does this by waiting untill all non-lfs files are downloaded and then using a parallel download of all lfs files as a batch.

   Honestly, I think git clone should just be git lfs clone by default. I'm not making that an alias but you could in the future.

***** TODO COMMENT bash aliases for git
      Git aliases are always pretty useful so we're gonna add them too
   #+BEGIN_SRC sh :tangle terminalEmulator/bash/bash_aliases.txt :padline no
   alias gs='git status '
   alias ga='git add '
   alias gb='git branch '
   alias gam='git commit --amend '
   alias gc='git commit'
   alias gd='git diff'
   alias gt='git checkout '
   alias gk='gitk --all&'
   alias gx='gitx --all'
   alias pull='git pull'
   alias pullo='git pull origin'
   alias push='git push'
   alias pusho='git push origin'
   alias pushf='git push -f origin'
   alias pushu='git push -u origin'
   alias merge='git merge'
   alias got='git '
   alias get='git '
   alias clone='git clone'
   alias add='git add'
   #+END_SRC

** Media
*** VLC - Video Player                                          :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
vlc
#+END_SRC

*** Vocal - Podcast Client                                      :application:
**** Installation                                                   :install:
#+NAME: install_
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
vocal
#+END_SRC

*** youtube-dl - Downloader for youtube videos                  :application:
**** Installation                                           :python2:install:
#+NAME: python2_install
#+BEGIN_SRC txt :padline no :tangle no :noweb yes
youtube-dl
#+END_SRC

** Activity Monitor
*** htop                                                        :application:
**** Installation                                                   :install:
#+NAME: install
#+BEGIN_SRC sh :padline no :tangle no :noweb yes
htop
#+END_SRC

**** Configuration                                            :configuration:
 All configuration options are located in the .htoprc file.
 Stolen from god knows where - seems like everyone uses it.

 #+BEGIN_SRC sh :tangle htoprc.txt
 # Beware! This file is rewritten every time htop exits.
 # The parser is also very primitive, and not human-friendly.
 # (I know, it's in the todo list).
 fields=0 48 17 18 38 39 40 2 46 47 49 1
 sort_key=46
 sort_direction=1
 hide_threads=0
 hide_kernel_threads=1
 hide_userland_threads=0
 shadow_other_users=0
 highlight_base_name=0
 highlight_megabytes=1
 highlight_threads=0
 tree_view=0
 header_margin=1
 detailed_cpu_time=1
 color_scheme=0
 delay=15
 left_meters=Hostname Tasks LoadAverage Uptime Memory Memory Swap CPU CPU
 left_meter_modes=2 2 2 2 1 2 1 1 2
 right_meters=AllCPUs
 right_meter_modes=1
 #+END_SRC

** Communication
*** Slack

**** Spacemacs Layer                                              :spacemacs:
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; There's no escaping the beast

    ;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Team Communication ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;
    slack                 ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

*** Twitter

**** Spacemacs Layer                                              :spacemacs:
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; Because Twitter is addictive

    ;;;;;;;;;;;;;;;;;;
    ;; Social Media ;;
    ;;;;;;;;;;;;;;;;;;
    twitter         ;;
    ;;;;;;;;;;;;;;;;;;
#+END_SRC

*** Email

**** Spacemacs Layer                                              :spacemacs:
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; Decent email client

    ;;;;;;;;;;;;;;;;;;
    ;; Email client ;;
    ;;;;;;;;;;;;;;;;;;
    mu4e            ;;
    ;;;;;;;;;;;;;;;;;;
#+END_SRC

*** RSS
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; RSS - clinginging on to Web 2.0

    ;;;;;;;;;;;;;;;;
    ;; RSS client ;;
    ;;;;;;;;;;;;;;;;
    elfeed        ;;
    ;;;;;;;;;;;;;;;;
#+END_SRC

** Documents

#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; RSS - clinginging on to Web 2.0

    ;;;;;;;;;;;;;;;;;;;
    ;; pdf utilities ;;
    ;;;;;;;;;;;;;;;;;;;
    pdf-tools        ;;
    ;;;;;;;;;;;;;;;;;;;
#+END_SRC

** File manager
*** ranger

#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

    ;; RSS - clinginging on to Web 2.0

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; pdf utilities               ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (ranger :variables             ;;
            ranger-show-preview t) ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

* Language Environment Configuration
** Python
 #+NAME: python
 #+BEGIN_SRC sh :noweb yes
 #########
 # Pyenv #
 #########

 <<python_pyenv>>

 #+END_SRC

*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; python layer configuration                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (python :variables                                     ;;
             python-sort-imports-on-save t                  ;;
             python-test-runner 'pytest                     ;;
             :packages                                      ;;
             (not hy-mode)  ; I maintain local `hy-mode'    ;;
             (not importmagic))  ; Broken? Don't need it.   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 #+END_SRC
*** Pyenv
 pyenv is used to isolate Python versions. For example, you may want to test your code against Python 2.6, 2.7, 3.3, 3.4 and 3.5, so you'll need a way to switch between them. Once activated, it prefixes the PATH environment variable with ~/.pyenv/shims, where there are special files matching the Python commands (python, pip). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the PYENV_VERSION environment variable, or the .python-version file, or the ~/.pyenv/version file. pyenv also makes the process of downloading and installing multiple Python versions easier, using the command pyenv install.

**** Installation of pyenv and extensions                           :install:

 We won't be installing pyenv through zypper since zypper doesn't have it unless you add someone's personal repo (which I am unwilling to do).
 Instead, we'll be installing it through cloning a git repo. Since pyenv is just a bunch of shell scripts, we'll be alright.

 #+NAME: python_pyenv
 #+BEGIN_SRC sh 
 # Taken from https://www.reddit.com/r/openSUSE/comments/70ozge/using_multiple_python_versions_on_leap/dos6798

 git clone https://github.com/pyenv/pyenv.git ~/.pyenv
 echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
 echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
 echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bashrc
 #+END_SRC

 Install the missing headers needed by Python modules. We're installing under install_ as there's no point for tests (these are high level libraries).
 #+NAME: install_
 #+BEGIN_SRC sh
 readline-devel sqlite3-devel libbz2-devel zlib-devel libopenssl-devel
 #+END_SRC

 Install virtualvenv
 #+NAME: install_
 #+BEGIN_SRC sh 
 python3-virtualenv
 #+END_SRC

 #+NAME: test
 #+BEGIN_SRC sh :tangle no
 @test "Check if pyenv has installed successfully" {
     command -v pyenv
 }
 #+END_SRC

**** Installing different versions of python
  Installing new Python versions is very straightforward. All Python versions are installed in the versions directory under the pyenv root.

  #+NAME: python_pyenv
  #+CAPTION: Install CPython 3.6.0 and CPython 2.7.13.
  #+BEGIN_SRC sh
  pyenv install 3.6.0
  pyenv install 2.7.13
  #+END_SRC

**** virtualvenv setup
  With virtualenv all your virtualenvs are kept on a same directory and your projects' code on another. My setup is:
  #+NAME: python_pyenv
  #+BEGIN_SRC sh :padline no
  # All virtualenvs will be on...
  # export WORKON_HOME=~/.ve
  mkdir -p ~/.ve 

  # All projects will be on...
  # export PROJECT_HOME=~/Projects
  mkdir -p ~/Projects 

  # The -p flag is in case these folders have been created earlier - without it, mkdir returns an error.
  #+END_SRC

  It's necessary to configure the shell to initialize pyenv when you start a terminal session. Put the lines bellow on your ~/.bashrc file:
  #+NAME: bashrc
  #+BEGIN_SRC sh :padline no
  export PATH="~/.pyenv/bin/:$PATH"

  export WORKON_HOME=~/.ve
  export PROJECT_HOME=~/Projects
  if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
  #+END_SRC

**** Resist the temptation to contaminate your global Python install

  I frequently use programs written in Python. I like them to be available in all sessions without activate any virtualenv.

  However I don't like to mess with the global Python installation to avoid library conflict issues.

  Another thing that I don't like is installing Jupyter/iPython on each of my projects' virtualenvs.

  I like to have only one install of Jupyter Notebook , one of iPython Console for Python3, one of iPython Console for Python2, and other tools like youtube-dl, rename, gnucash-to-beancount, rows, s3cmd, fabric, mercurial, etc.

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  pyenv virtualenv 3.6.0 jupyter3
  pyenv virtualenv 3.6.0 tools3
  pyenv virtualenv 2.7.13 ipython2
  pyenv virtualenv 2.7.13 tools2
  #+END_SRC

  Jupyter supports many kernels. This allows a single Jupyter install to create notebooks for Python2, Python3, R, Bash and many other languages. At this time I only want to support Python2 and Python3.

***** Installing jupyter under jupyter3

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  pyenv activate jupyter3
  pip install jupyter
  python -m ipykernel install --user
  pyenv deactivate
  #+END_SRC

***** Installing ipython under ipython2

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  pyenv activate ipython2
  pip install ipykernel
  python -m ipykernel install --user
  pyenv deactivate
  #+END_SRC

  Note that when I install Jupyter on Python3 it will by default install iPython and the Kernel too. For Python2 I only need to install iPython and the Kernel. I'll explain this better bellow.

***** Tools which run on Python 3

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  pyenv activate tools3
  pip install youtube-dl gnucash-to-beancount rows 
  pyenv deactivate
  #+END_SRC

***** Tools that only run on Python 2

 #+NAME: python_pyenv
  #+BEGIN_SRC sh 
  pyenv activate tools2
  pip install rename s3cmd fabric mercurial
  pyenv deactivate
  #+END_SRC

***** Final Step
  Finally, it's time to make all Python versions and special virtualenvs work with each other.

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  pyenv global 3.6.0 2.7.13 jupyter3 ipython2 tools3 tools2
  #+END_SRC

  The above command establishes the PATH priority so scripts can be accessed in the right order without activating any virtualenv.

**** How to use Jupyter and iPython with my projects?

  This was the main motivation to write this guide.

  Both Notebook and Console were part of the iPython project, which, as the name suggests, were only about Python. But the Notebook evolution enabled it to become language agnostic, so developers decided to split the project in 2: Jupyter and iPython

  Now Jupyter contains Notebook, while iPython contains Console and the Python Kernel which Jupyter uses to execute Python code.

  I used to use an old iPython version and during a clumsy upgrade Jupyter stopped detecting the active virtualenv, so I couldn't import its installed libraries.

  Actually, Jupyter does not detect the active virtualenv: it's the iPython instance which Jupyter initializes. The problem then is that iPython's virtualenv detection code only runs in the interactive shell mode, but not in the kernel mode. Besides that the detection code only works properly if the active virtualenv's Python version and the Python version running iPython are the same.

  The solution is to customize iPython's startup process. For that we need to create an iPython profile and install a magic script I wrote to do the trick:

 #+NAME: python_pyenv
  #+BEGIN_SRC sh
  ipython profile create
  curl -L http://hbn.link/hb-ipython-startup-script > ~/.ipython/profile_default/startup/00-venv-sitepackages.py
  #+END_SRC
  With this, no matter the mode iPython starts, the virtualenv's site-packages will be available in the PYTHONPATH.

  Back to our proj3, after activating its virtualenv running workon proj3, you can simply execute ipython to run the interactive mode, or jupyter notebook to get all the fun.

*** Pylint

** Bash

*** bats-core
 bats-core is a unit test library for 

 #+NAME: install
 #+BEGIN_SRC sh
 bats
 #+END_SRC

 #+BEGIN_SRC sh
 git clone https://github.com/bats-core/bats-core.git
 cd bats-core
 sudo ./install.sh /usr/local
 #+END_SRC

** Haskell
*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; haskell layer configuration                         ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (haskell :variables                                    ;;
              haskell-completion-backend 'intero            ;;
              haskell-enable-hindent-style "johan-tibell")  ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

** Javascript
*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; javascript layer configuration ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     javascript                        ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 #+END_SRC

** Emacs-lisp
*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; emacs-lisp layer configuration   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     emacs-lisp                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

** C & C++
*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; c & C++ layer configuration    ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     c-c++                             ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

** Markup Languages
*** csv
 Probably not markup but close enough
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; csv layer configuration      ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     csv                             ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

**** Stuff
#+BEGIN_SRC emacs-lisp
(add-auto-mode 'csv-mode "\\.[Cc][Ss][Vv]\\'")

(setq csv-separators '("," ";" "|" " "))
#+END_SRC
*** html
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; html layer configuration    ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     html                           ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

*** markdown
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; markdown layer configuration   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     markdown                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

*** yaml
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; yaml layer configuration   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     yaml                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

*** asciidoc
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; asciidoc layer configuration   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     asciidoc                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

*** dot & graphviz
**** Spacemacs Layer                                              :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; graphviz layer configuration   ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     graphviz                          ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

** Org
Too awesome to be classified as just a markup language. 
*** Spacemacs Layer                                               :spacemacs:
 #+NAME: dotspacemacs/layers/variables
 #+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; org layer configuration                     ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (org :variables org-enable-github-support t    ;;
                     org-enable-bootstrap-support t ;;
                     org-enable-reveal-js-support t ;;     ;; Use #+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/ at the top of the org file
     )                                              ;;
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC

*** Settings
 Lots of org mode stuff


**** Babel
***** Languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (shell . t)
      (python . t)
      (R . t)
      (ruby . t)
      (ocaml . t)
      (ditaa . t)
      (dot . t)
      (octave . t)
      (sqlite . t)
      (perl . t)
      (screen . t)
      (plantuml . t)
      (lilypond . t)
      (org . t)
      (makefile . t)
      ))
   (setq org-src-preserve-indentation t)
 #+END_SRC

***** Adding Source blocks

 Need to add info about the capital letters being sessioned (how do i explain that?)
 #+BEGIN_SRC emacs-lisp

 (add-to-list 'org-structure-template-alist
         '(
           "S" 
           "#+BEGIN_SRC ?\n\n#+END_SRC" 
           "<src lang=\"?\">\n\n</src>"
          )
 )


 ;; R code
 (add-to-list 'org-structure-template-alist
         '(
           "r" 
           "#+begin_src R :results output :session *R* :exports both\n\n#+end_src" 
           "<src lang=\"R\">\n\n</src>"
          )
 )
 (add-to-list 'org-structure-template-alist
         '(
           "R" 
           "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session *R* \n\n#+end_src" 
           "<src lang=\"R\">\n\n</src>"
          )
 )




 ;; Python code
 (add-to-list 'org-structure-template-alist
         '("p" "#+begin_src python :results output :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))
 (add-to-list 'org-structure-template-alist
         '("P" "#+begin_src python :results output :session *python* :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))



 ;; Bash code
 (add-to-list 'org-structure-template-alist
         '("b" "#+begin_src shell :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
 (add-to-list 'org-structure-template-alist
         '("B" "#+begin_src shell :session *shell* :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))




 ;; Graphviz
 (add-to-list 'org-structure-template-alist
         '("g" "#+begin_src dot :results output graphics :file \"/tmp/graph.pdf\" :exports both
    digraph G {
       node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname=\"Helvetica\"];
       A[label=\"A\"]
       B[label=\"B\"]
       A->B
    }\n#+end_src" "<src lang=\"dot\">\n\n</src>"))
 #+END_SRC

**** Heading is DONE when all checkboxes are filled
 #+BEGIN_SRC emacs-lisp
 ;; see http://thread.gmane.org/gmane.emacs.orgmode/42715
 (eval-after-load 'org-list
   '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

 (defun ndk/checkbox-list-complete ()
   (save-excursion
     (org-back-to-heading t)
     (let ((beg (point)) end)
       (end-of-line)
       (setq end (point))
       (goto-char beg)
       (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
             (if (match-end 1)
                 (if (equal (match-string 1) "100%")
                     ;; all done - do the state change
                     (org-todo 'done)
                   (org-todo 'todo))
               (if (and (> (match-end 2) (match-beginning 2))
                        (equal (match-string 2) (match-string 3)))
                   (org-todo 'done)
                 (org-todo 'todo)))))))
 #+END_SRC
**** Custom Protocols for links

 DO ONE FOR THE WEB TO OPEN IN EMACS' BROWSER

 #+BEGIN_SRC emacs-lisp

 ;; https://caiorss.github.io/Emacs-Elisp-Programming/Org-Mode.html | 2.4 Custom Protocols
 ;; Hyperlink syntax: dir:<file-path>
 (add-hook 'org-mode-hook
           (lambda ()
               (org-add-link-type "dir" #'dired nil)))

 (add-hook 'org-mode-hook
           (lambda ()
                  (org-add-link-type  "man" #'woman nil)))
 #+END_SRC

**** Disable security confirmations
 #+BEGIN_SRC emacs-lisp
 ;; https://caiorss.github.io/Emacs-Elisp-Programming/Org-Mode.html | 2.5 Settings
 ;; Disable security confirmations
 ;;
 (setq   ;; Confirmation for running coide blocks
         org-confirm-babel-evaluate      nil
         ;; Confirmation for elisp links
         org-confirm-elisp-link-function nil
         ;; Confirmation for shell links
         org-confirm-shell-link-function nil

         org-export-babel-evaluate       nil
         )
 #+END_SRC

**** Export backends
 #+BEGIN_SRC emacs-lisp
 ;; Prepare stuff for org-export-backends
 (setq org-export-backends '(org latex icalendar html ascii))
 #+END_SRC

**** Modules
 #+BEGIN_SRC emacs-lisp
 ;; Experiment with and explain why you use it. Lots of links!
   (setq org-modules '(org-bbdb
                       org-gnus
                       org-drill
                       org-info
                       org-jsinfo
                       org-habit
                       org-irc
                       org-mouse
                       org-protocol
                       org-annotate-file
                       org-eval
                       org-expiry
                       org-interactive-query
                       org-man
                       org-collector
                       org-panel
                       org-screen
                       org-toc))

 #+END_SRC

**** Todo Keywords
 #+BEGIN_SRC emacs-lisp
 ;; Change to fit your style
 (setq org-todo-keywords
  '((sequence
     "TODO(t)"  ; next action
     "TOBLOG(b)"  ; next action
     "STARTED(s)"
     "WAITING(w@/!)"
     "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
    (sequence "LEARN" "TRY" "TEACH" "|" "COMPLETE(x)")
    (sequence "TOSKETCH" "SKETCHED" "|" "POSTED")
    (sequence "TOBUY" "TOSHRINK" "TOCUT"  "TOSEW" "|" "DONE(x)")
    (sequence "TODELEGATE(-)" "DELEGATED(d)" "|" "COMPLETE(x)")))

 (setq org-todo-keyword-faces
       '(("TODO" . (:foreground "green" :weight bold))
         ("DONE" . (:foreground "cyan" :weight bold))
         ("WAITING" . (:foreground "red" :weight bold))
         ("SOMEDAY" . (:foreground "gray" :weight bold))))

 #+END_SRC

**** Tags
 #+BEGIN_SRC emacs-lisp
 ;; We don't want the project tag to be inherited by its children
 (setq org-tags-exclude-from-inheritance '("project"))
 #+END_SRC

* Spacemacs
** .spacemacs file

#+BEGIN_EXAMPLE
#+NAME: dotspacemacs/layers/dotspacemacs-configuration-layers
#+BEGIN_SRC emacs-lisp
<<dotspacemacs/layers/variables>> 
#+END_SRC
#+END_EXAMPLE

#+NAME: dotspacemacs/layers/dotspacemacs-configuration-layers
#+BEGIN_SRC emacs-lisp :noweb yes :exports none
<<dotspacemacs/layers/variables>> 
#+END_SRC

#+BEGIN_EXAMPLE
#+NAME: dotspacemacs/user-init
#+BEGIN_SRC emacs-lisp

#+END_SRC
#+END_EXAMPLE

#+BEGIN_EXAMPLE
#+NAME: dotspacemacs/user-config
#+BEGIN_SRC emacs-lisp

#+END_SRC
#+END_EXAMPLE

#+NAME: .spacemacs
#+BEGIN_SRC emacs-lisp :noweb yes :tangle .spacemacs
;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(






<<dotspacemacs/layers/dotspacemacs-configuration-layers>>







     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'nil                                                              ;; Changed to 'nil from 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '(
                                (agenda . 10)                                                    ;; Added agenda to startup list
                                (recents . 2)                                                    ;; Changed value from 5 to 2
                                (projects . 2)                                                   ;; Changed value from 7 to 2
                                )
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t                                                                   ;; Changed value from nil to t
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etcâ¦
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))

(defun dotspacemacs/user-init (






<<dotspacemacs/user-init>>






)
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-config (






<<dotspacemacs/user-config>>






)
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
#+END_SRC

** iBuffer
*** Spacemacs Layer                                               :spacemacs:
#+NAME: dotspacemacs/layers/variables
#+BEGIN_SRC emacs-lisp :padline yes :tangle no :noweb yes
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; iBuffer configuration                 ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (ibuffer :variables                      ;;
             ibuffer-group-buffers-by 'mode) ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

** Customization

*** Delete trailing space before saving
#+BEGIN_SRC emacs-lisp
;; 2016-02-06: https://www.reddit.com/r/emacs/comments/445w6s/whats_some_small_thing_in_your_dotemacs_that_you/
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** twittering-mode

#+BEGIN_SRC emacs-lisp
;;;;; twittering-mode

(require 'twittering-mode)
(setq twittering-username "grokkingStuff")

(setq twittering-icon-mode t) 
(setq twittering-timer-interval 300)

;; Needs libnotify-bin
(add-hook 'twittering-new-tweets-hook (lambda ()
   (let ((n twittering-new-tweets-count))
     (start-process "twittering-notify" nil "notify-send"
                    "-i" "/usr/share/pixmaps/gnome-emacs.png"
                    "New tweets"
                    (format "You have %d new tweet%s"
                            n (if (> n 1) "s" ""))))))

#+END_SRC

*** dockerfile-mode

#+BEGIN_SRC emacs-lisp
;;;;; dockerfile-mode
(require 'dockerfile-mode)                 ;; Add to top of dockerfile
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
*** Use woman instead of man
#+BEGIN_SRC emacs-lisp
;;;;; woman

;; Use woman instead of man
(defalias 'man 'woman)
#+END_SRC

*** auto-mode-alist 
 #+BEGIN_SRC emacs-lisp
 ;;;; auto-mode-alist
 (setq auto-mode-alist
       (append
        '(("\\.css$" . css-mode)
          ("\\.ya?ml$" . yaml-mode)
          ("^mutt-" . mail-mode)
          ("\\.html$" . html-mode)
          ("configure.in" . m4-mode)
          ("\\.tt2?$" . html-mode)
          ("\\.tmpl$" . html-mode)
          ("\\.pir$" . pir-mode)
          ("\\.[hg]s$"  . haskell-mode)
          ("\\.hi$"     . haskell-mode)
          ("\\.ml[iyl]?$" . caml-mode)
          ("\\.l[hg]s$" . literate-haskell-mode)
          ;; shellscript
          ("/etc/profile" . sh-mode)
          ("/etc/bash_completion" . sh-mode)
          ("\\.SH" . sh-mode)
          ("\\.bashrc" . sh-mode)
          ;; Markdown
          ("\\.md$"      . markdown-mode)
          ("\\.mkdn$"    . markdown-mode)
          ;; JavaScript
          ("\\.js$"    . javascript-mode)
          ("\\.json$"    . javascript-mode)
          ;; emacs
          ("\\.elt$"    . emacs-lisp-mode)
          ;; cperl-mode
          ("\\.PL$" . cperl-mode)
          ("\\.pl$" . cperl-mode)
          ("\\.nqp$" . cperl-mode)
          ("\\.perl$" . cperl-mode) ; git source tree
          ("\\.pm$" . cperl-mode)
          ("\\.t$" . cperl-mode)
          ("\\.psgi$" . cperl-mode)
          ("\\.comp$" . cperl-mode)
          ("/gitweb\\.conf$"  . cperl-mode)
          ;; pod-mode
          ("\\.pod$" . pod-mode)
          ;; tap-mode
          ("\\.tap$" . tap-mode)
          ;; makefile-mode
          ("\\.mak$" . makefile-mode) ;; used in Git
          ("/Makefile$" . makefile-mode) ;; Evidently not the default
          ("/Dockerfile$" . dockerfile-mode) ;; Evidently not the default
          ;; xs
          ("\\.xs$" . xs-mode)
          ;; php
          ("\\.php$" . php-mode)
          ("\\.inc$" . php-mode)
          ;; org-mode
          ("\\.org$" . org-mode)
          ;; po-mode
          ("\\.po$" . po-mode) ;; not \.po\. as is the po-mode default
          ("\\.pot$" . po-mode)
          ("\\.recentf$" . emacs-lisp-mode)
          ;; conf-mode
          ("\\.vhost$"  . conf-mode)
          ("\\.hgrc$"  . conf-mode)
          ("\\.rc$"  . conf-mode)
          ("\\.cnf$" . conf-mode)
          ("\\.gitconfig$" . conf-mode)
          ("\\.gitmodules$" . conf-mode)
          ("\\.offlineimaprc" . conf-mode)
          ("\\.mbsyncrc" . conf-mode)
          ("^/etc/apache2/sites-" . conf-mode)
          ("^/etc/ssh/sshd" . conf-mode)
          ("^/etc/deb-packages" . conf-mode)
          ("^/etc/apt/" . conf-mode)
          ("\\.screenrc" . conf-mode)
          ("\\.screenrc\.d/" . conf-mode)
          ;; git
          ("COMMIT_EDITMSG" . git-commit-mode)
          ;; sh
          ("\\.aliases$" . sh-mode)
          ;; lua
          ("\\.lua$" . lua-mode)
          ;; ruby
          ("\\.pp$" . puppet-mode)
          ("\\.rhtml$" . ruby-mode)
          ("\\.rjs$"   . ruby-mode)
          ("\\.rxml$"   . ruby-mode)
          ("\\.erb$"   . ruby-mode)
          ("\\.builder$"   . ruby-mode)
          ("\\.rake$" . ruby-mode)
          ("\\.kick$" . ruby-mode))
        auto-mode-alist))
 #+END_SRC

**** Ask y or n instead of yes or no
 #+NAME: dot
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; https://news.ycombinator.com/item?id=1654164
 (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

**** Character encodings default to utf-8
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; From https://caiorss.github.io/Emacs-Elisp-Programming/Customization.html
 ;; Character encodings default to utf-8.
 (prefer-coding-system 'utf-8)
 (set-language-environment 'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-selection-coding-system 'utf-8)
 #+END_SRC

**** Create file if nonexistent without confirmation
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; https://news.ycombinator.com/item?id=1654164 | Kototama's comment
 ;; do not confirm file creation
 (setq confirm-nonexistent-file-or-buffer nil)
 #+END_SRC

**** Indentation Settings
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; From https://bitbucket.org/brodie/dotfiles/src/tip/.emacs?fileviewer=file-view-default
 ; Indentation settings
 (setq-default indent-tabs-mode nil) ; disable tab character insertion
 (setq standard-indent 4)
 (setq c-default-style "bsd") ; brackets go on a separate line
 (setq c-basic-offset 4)
 (setq-default c-indent-level 4)
 (setq-default js-indent-level 2)
 (setq-default css-indent-offset 2)
 ; line up args on separate lines with opening parens
 (setq c-offsets-alist
       '((arglist-intro c-lineup-arglist-intro-after-paren)))
 (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76
                         80 84 88 92 96 100 104 108 112 116 120))
 #+END_SRC

**** zck's settings

 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; From https://github.com/zck/emacs/blob/master/.emacs

 (setq show-paren-style 'expression)
 ;; Highlight the entire expression
 ;; http://www.emacsblog.org/2007/08/07/quick-tip-show-paren-mode/
 (tool-bar-mode -1)
 ;; remove toolbar
 ;; http://www.emacswiki.org/emacs/ToolBar
 (menu-bar-mode -1)
 ;; who needs 'em?
 ;; http://www.emacswiki.org/emacs/ToolBar
 (set-scroll-bar-mode 'right)
 ;; http://www.emacswiki.org/emacs/ScrollBar
 (mouse-avoidance-mode 'exile)
 ;; move the mouse pointer to the corner of the screen when approached
 ;; http://www.emacswiki.org/emacs/MouseAvoidance

 (setq frame-title-format '("%b - " invocation-name "@" system-name))
 ;; change the title of emacs
 ;; http://www.gnu.org/software/emacs/elisp/html_node/Frame-Titles.html

 (setq confirm-kill-emacs 'y-or-n-p)
 ;; yell at me before going away
 ;; http://www.gnu.org/software/emacs/manual/html_node/emacs/Exiting.html

 (setq inhibit-startup-message t)

 (setq default-indicate-empty-lines t)
 ;; http://www.emacswiki.org/emacs/TheFringe

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 #+END_SRC


**** Emacs Server must be used to avoid startup delay as much as possible
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; https://news.ycombinator.com/item?id=1654670
 ;; Emacsclient is a real must.
   ;; use this to start server for emacsclient
   (if (not (boundp 'server-process))
      (server-start))
 #+END_SRC

**** Font settings
 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp
 ;; Font
 ;; https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el
 (progn
   ;; set a default font
   (cond
    ((string-equal system-type "gnu/linux")
     (when (member "DejaVu Sans Mono" (font-family-list)) (set-frame-font "DejaVu Sans Mono" t t))
     ;; specify font for chinese characters using default chinese font on linux
     (when (member "WenQuanYi Micro Hei" (font-family-list))
       (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei" ))
     ;;
     )
    ((string-equal system-type "darwin") ; Mac
     (when (member "Menlo" (font-family-list)) (set-frame-font "Menlo-14" t t))
     ;;
     )
    ((string-equal system-type "windows-nt") ; Windows
    nil))

   ;; specify font for all unicode characters
   (when (member "Symbola" (font-family-list))
     (set-fontset-font t 'unicode "Symbola" nil 'prepend))
 )
 #+END_SRC

** Looking for binaries
https://github.com/novoid/dot-emacs/blob/master/config.org#looking-for-binaries
^^ Use it. It's pretty handy.

** eshell

 #+NAME: dotspacemacs/user-config
 #+BEGIN_SRC emacs-lisp

 (defun eshell/clear ()
   "clear the eshell buffer."
   (interactive)
   (let ((inhibit-read-only t))
     (erase-buffer)))


 ;; Simple prompt for eshell
 ;; (setq eshell-prompt-function (lambda () "eshell > "))

 ;; Colorfull prompt for eshell
 (setq eshell-prompt-function
       (lambda nil
         (concat
          (propertize (eshell/pwd) 'face '(:foreground "#8787af"))
          (propertize ">" 'face '(:foreground "#f75f5f"))
          (propertize ">" 'face '(:foreground "#ffaf5f"))
          (propertize ">" 'face '(:foreground "#87af5f"))
          (propertize " " 'face nil))))
 #+END_SRC

* gpg.conf

This is an implementation of the Riseup OpenPGP Best Practices
https://help.riseup.net/en/security/message-security/openpgp/best-practices

** default key
The default key to sign with. If this option is not used, the default key is the first key found in the secret keyring
#+BEGIN_SRC sh
default-key 0x18F3685C0022BFF3
#+END_SRC

** behavior
*** Disable inclusion of the version string in ASCII armored output
#+BEGIN_SRC sh
no-emit-version
#+END_SRC
*** Disable comment string in clear text signatures and ASCII armored messages
#+BEGIN_SRC sh
no-comments
#+END_SRC
*** Display long key IDs
#+BEGIN_SRC sh
keyid-format 0xlong
#+END_SRC
*** List all keys (or the specified ones) along with their fingerprints
#+BEGIN_SRC sh
with-fingerprint
#+END_SRC
*** Display the calculated validity of user IDs during key listings
#+BEGIN_SRC sh
list-options show-uid-validity
verify-options show-uid-validity
#+END_SRC
*** Try to use the GnuPG-Agent. With this option, GnuPG first tries to connect to the agent before it asks for a passphrase.
#+BEGIN_SRC sh
use-agent
charset utf-8
fixed-list-mode
#+END_SRC

** keyserver
This is the server that --recv-keys, --send-keys, and --search-keys will communicate with to receive keys from, send keys to, and search for keys on
#+BEGIN_SRC sh
#keyserver hkps://hkps.pool.sks-keyservers.net
keyserver pgp.mit.edu
#+END_SRC

Provide a certificate store to override the system default
Get this from https://sks-keyservers.net/sks-keyservers.netCA.pem
#+BEGIN_SRC sh
#keyserver-options ca-cert-file=/usr/local/etc/ssl/certs/hkps.pool.sks-keyservers.net.pem
#+END_SRC


Set the proxy to use for HTTP and HKP keyservers - default to the standard local Tor socks proxy
It is encouraged to use Tor for improved anonymity. Preferrably use either a dedicated SOCKSPort for GnuPG and/or enable IsolateDestPort and IsolateDestAddr
I run my tor socks proxy in a container, see .dockerfunc and github.com/jfrazelle/dockerfiles
#+BEGIN_SRC sh
#keyserver-options http-proxy=socks5-hostname://torproxy:9050
#+END_SRC

Don't leak DNS, see https://trac.torproject.org/projects/tor/ticket/2846
#+BEGIN_SRC sh
#keyserver-options no-try-dns-srv
#+END_SRC


When using --refresh-keys, if the key in question has a preferred keyserver URL, then disable use of that preferred keyserver to refresh the key from
#+BEGIN_SRC sh
keyserver-options no-honor-keyserver-url
#+END_SRC

When searching for a key with --search-keys, include keys that are marked on the keyserver as revoked
#+BEGIN_SRC sh
keyserver-options include-revoked
#+END_SRC

** algorithm and ciphers
list of personal digest preferences. When multiple digests are supported by all recipients, choose the strongest one
#+BEGIN_SRC sh
personal-cipher-preferences AES256 AES192 AES CAST5
#+END_SRC

list of personal digest preferences. When multiple ciphers are supported by all recipients, choose the strongest one
#+BEGIN_SRC sh
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
#+END_SRC

message digest algorithm used when signing a key
#+BEGIN_SRC sh
cert-digest-algo SHA512
s2k-cipher-algo AES256
s2k-digest-algo SHA512
#+END_SRC

This preference list is used for new keys and becomes the default for "setpref" in the edit menu
#+BEGIN_SRC sh
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
#+END_SRC




